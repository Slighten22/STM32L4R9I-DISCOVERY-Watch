
kj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002300  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080024bc  080024bc  000124bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080024fc  080024fc  000124fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002500  08002500  00012500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08002504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00094a34  20000004  08002508  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20094a38  08002508  00024a38  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00013260  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000262b  00000000  00000000  00033294  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000aa9b  00000000  00000000  000358bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ca0  00000000  00000000  00040360  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000fb8  00000000  00000000  00041000  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007351  00000000  00000000  00041fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000507c  00000000  00000000  00049309  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004e385  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000023d0  00000000  00000000  0004e404  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000004 	.word	0x20000004
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080024a4 	.word	0x080024a4

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000008 	.word	0x20000008
 80001f8:	080024a4 	.word	0x080024a4

080001fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001fc:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80001fe:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <HAL_InitTick+0x2c>)
{
 8000200:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000202:	6818      	ldr	r0, [r3, #0]
 8000204:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000208:	fbb0 f0f3 	udiv	r0, r0, r3
 800020c:	f000 f872 	bl	80002f4 <HAL_SYSTICK_Config>
 8000210:	4604      	mov	r4, r0
 8000212:	b938      	cbnz	r0, 8000224 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000214:	4602      	mov	r2, r0
 8000216:	4629      	mov	r1, r5
 8000218:	f04f 30ff 	mov.w	r0, #4294967295
 800021c:	f000 f836 	bl	800028c <HAL_NVIC_SetPriority>
 8000220:	4620      	mov	r0, r4
 8000222:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8000224:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000226:	bd38      	pop	{r3, r4, r5, pc}
 8000228:	20000000 	.word	0x20000000

0800022c <HAL_Init>:
{
 800022c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800022e:	2003      	movs	r0, #3
 8000230:	f000 f81a 	bl	8000268 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000234:	2000      	movs	r0, #0
 8000236:	f7ff ffe1 	bl	80001fc <HAL_InitTick>
 800023a:	4604      	mov	r4, r0
 800023c:	b918      	cbnz	r0, 8000246 <HAL_Init+0x1a>
    HAL_MspInit();
 800023e:	f001 ffef 	bl	8002220 <HAL_MspInit>
}
 8000242:	4620      	mov	r0, r4
 8000244:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000246:	2401      	movs	r4, #1
 8000248:	e7fb      	b.n	8000242 <HAL_Init+0x16>
	...

0800024c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800024c:	4a02      	ldr	r2, [pc, #8]	; (8000258 <HAL_IncTick+0xc>)
 800024e:	6813      	ldr	r3, [r2, #0]
 8000250:	3301      	adds	r3, #1
 8000252:	6013      	str	r3, [r2, #0]
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	20000020 	.word	0x20000020

0800025c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800025c:	4b01      	ldr	r3, [pc, #4]	; (8000264 <HAL_GetTick+0x8>)
 800025e:	6818      	ldr	r0, [r3, #0]
}
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	20000020 	.word	0x20000020

08000268 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000268:	4a07      	ldr	r2, [pc, #28]	; (8000288 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800026a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000270:	041b      	lsls	r3, r3, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000278:	0200      	lsls	r0, r0, #8
 800027a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800027e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000282:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000284:	60d3      	str	r3, [r2, #12]
 8000286:	4770      	bx	lr
 8000288:	e000ed00 	.word	0xe000ed00

0800028c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800028c:	4b17      	ldr	r3, [pc, #92]	; (80002ec <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800028e:	b530      	push	{r4, r5, lr}
 8000290:	68dc      	ldr	r4, [r3, #12]
 8000292:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000296:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800029a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800029c:	2b04      	cmp	r3, #4
 800029e:	bf28      	it	cs
 80002a0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002a2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002a4:	f04f 0501 	mov.w	r5, #1
 80002a8:	fa05 f303 	lsl.w	r3, r5, r3
 80002ac:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002b0:	bf8c      	ite	hi
 80002b2:	3c03      	subhi	r4, #3
 80002b4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002b6:	4019      	ands	r1, r3
 80002b8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002ba:	fa05 f404 	lsl.w	r4, r5, r4
 80002be:	3c01      	subs	r4, #1
 80002c0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80002c2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002c4:	ea42 0201 	orr.w	r2, r2, r1
 80002c8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002cc:	bfaf      	iteee	ge
 80002ce:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d2:	f000 000f 	andlt.w	r0, r0, #15
 80002d6:	4b06      	ldrlt	r3, [pc, #24]	; (80002f0 <HAL_NVIC_SetPriority+0x64>)
 80002d8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002da:	bfa5      	ittet	ge
 80002dc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002e0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002e8:	bd30      	pop	{r4, r5, pc}
 80002ea:	bf00      	nop
 80002ec:	e000ed00 	.word	0xe000ed00
 80002f0:	e000ed14 	.word	0xe000ed14

080002f4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002f4:	3801      	subs	r0, #1
 80002f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002fa:	d20a      	bcs.n	8000312 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fe:	4a07      	ldr	r2, [pc, #28]	; (800031c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000300:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000302:	21f0      	movs	r1, #240	; 0xf0
 8000304:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000308:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800030a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800030c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800030e:	601a      	str	r2, [r3, #0]
 8000310:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000312:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	e000e010 	.word	0xe000e010
 800031c:	e000ed00 	.word	0xe000ed00

08000320 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8000320:	7c03      	ldrb	r3, [r0, #16]
 8000322:	2b01      	cmp	r3, #1
 8000324:	d05f      	beq.n	80003e6 <HAL_DSI_ConfigErrorMonitor+0xc6>
 8000326:	2301      	movs	r3, #1
 8000328:	7403      	strb	r3, [r0, #16]

  hdsi->Instance->IER[0U] = 0U;
 800032a:	6803      	ldr	r3, [r0, #0]
 800032c:	2200      	movs	r2, #0
 800032e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8000332:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8000336:	07ca      	lsls	r2, r1, #31
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8000338:	bf48      	it	mi
 800033a:	f8d3 20c4 	ldrmi.w	r2, [r3, #196]	; 0xc4
  hdsi->ErrorMsk = ActiveErrors;
 800033e:	6181      	str	r1, [r0, #24]
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8000340:	bf42      	ittt	mi
 8000342:	ea6f 4212 	mvnmi.w	r2, r2, lsr #16
 8000346:	ea6f 4202 	mvnmi.w	r2, r2, lsl #16
 800034a:	f8c3 20c4 	strmi.w	r2, [r3, #196]	; 0xc4
  }

  if((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800034e:	078a      	lsls	r2, r1, #30
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8000350:	bf42      	ittt	mi
 8000352:	f8d3 20c4 	ldrmi.w	r2, [r3, #196]	; 0xc4
 8000356:	f442 12f8 	orrmi.w	r2, r2, #2031616	; 0x1f0000
 800035a:	f8c3 20c4 	strmi.w	r2, [r3, #196]	; 0xc4
  }

  if((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800035e:	074a      	lsls	r2, r1, #29
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8000360:	bf42      	ittt	mi
 8000362:	f8d3 20c8 	ldrmi.w	r2, [r3, #200]	; 0xc8
 8000366:	f042 0201 	orrmi.w	r2, r2, #1
 800036a:	f8c3 20c8 	strmi.w	r2, [r3, #200]	; 0xc8
  }

  if((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 800036e:	070a      	lsls	r2, r1, #28
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8000370:	bf42      	ittt	mi
 8000372:	f8d3 20c8 	ldrmi.w	r2, [r3, #200]	; 0xc8
 8000376:	f042 0202 	orrmi.w	r2, r2, #2
 800037a:	f8c3 20c8 	strmi.w	r2, [r3, #200]	; 0xc8
  }

  if((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 800037e:	06ca      	lsls	r2, r1, #27
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8000380:	bf42      	ittt	mi
 8000382:	f8d3 20c8 	ldrmi.w	r2, [r3, #200]	; 0xc8
 8000386:	f042 020c 	orrmi.w	r2, r2, #12
 800038a:	f8c3 20c8 	strmi.w	r2, [r3, #200]	; 0xc8
  }

  if((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 800038e:	068a      	lsls	r2, r1, #26
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8000390:	bf42      	ittt	mi
 8000392:	f8d3 20c8 	ldrmi.w	r2, [r3, #200]	; 0xc8
 8000396:	f042 0210 	orrmi.w	r2, r2, #16
 800039a:	f8c3 20c8 	strmi.w	r2, [r3, #200]	; 0xc8
  }

  if((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 800039e:	064a      	lsls	r2, r1, #25
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 80003a0:	bf42      	ittt	mi
 80003a2:	f8d3 20c8 	ldrmi.w	r2, [r3, #200]	; 0xc8
 80003a6:	f042 0220 	orrmi.w	r2, r2, #32
 80003aa:	f8c3 20c8 	strmi.w	r2, [r3, #200]	; 0xc8
  }

  if((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 80003ae:	060a      	lsls	r2, r1, #24
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 80003b0:	bf42      	ittt	mi
 80003b2:	f8d3 20c8 	ldrmi.w	r2, [r3, #200]	; 0xc8
 80003b6:	f042 0240 	orrmi.w	r2, r2, #64	; 0x40
 80003ba:	f8c3 20c8 	strmi.w	r2, [r3, #200]	; 0xc8
  }

  if((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80003be:	05ca      	lsls	r2, r1, #23
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80003c0:	bf42      	ittt	mi
 80003c2:	f8d3 20c8 	ldrmi.w	r2, [r3, #200]	; 0xc8
 80003c6:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
 80003ca:	f8c3 20c8 	strmi.w	r2, [r3, #200]	; 0xc8
  }

  if((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80003ce:	058a      	lsls	r2, r1, #22
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80003d0:	bf42      	ittt	mi
 80003d2:	f8d3 20c8 	ldrmi.w	r2, [r3, #200]	; 0xc8
 80003d6:	f442 52f8 	orrmi.w	r2, r2, #7936	; 0x1f00
 80003da:	f8c3 20c8 	strmi.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80003de:	2300      	movs	r3, #0
 80003e0:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80003e2:	4618      	mov	r0, r3
 80003e4:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80003e6:	2002      	movs	r0, #2
}
 80003e8:	4770      	bx	lr
	...

080003ec <HAL_DSI_Init>:
{
 80003ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80003ee:	460d      	mov	r5, r1
  if(hdsi == NULL)
 80003f0:	4604      	mov	r4, r0
 80003f2:	2800      	cmp	r0, #0
 80003f4:	f000 80a4 	beq.w	8000540 <HAL_DSI_Init+0x154>
  if(hdsi->State == HAL_DSI_STATE_RESET)
 80003f8:	7c43      	ldrb	r3, [r0, #17]
 80003fa:	b90b      	cbnz	r3, 8000400 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 80003fc:	f001 ff28 	bl	8002250 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8000400:	2303      	movs	r3, #3
 8000402:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8000404:	2300      	movs	r3, #0
 8000406:	9300      	str	r3, [sp, #0]
 8000408:	6823      	ldr	r3, [r4, #0]
 800040a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800040e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000412:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8000416:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800041a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800041e:	9300      	str	r3, [sp, #0]
 8000420:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8000422:	f7ff ff1b 	bl	800025c <HAL_GetTick>
 8000426:	4606      	mov	r6, r0
  while(__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8000428:	6822      	ldr	r2, [r4, #0]
 800042a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 800042e:	04d9      	lsls	r1, r3, #19
 8000430:	d575      	bpl.n	800051e <HAL_DSI_Init+0x132>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8000432:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8000436:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 800043a:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 800043e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV)<<2U) | ((PLLInit->PLLIDF)<<11U) | ((PLLInit->PLLODF)<<16U));
 8000442:	e895 0009 	ldmia.w	r5, {r0, r3}
 8000446:	02db      	lsls	r3, r3, #11
 8000448:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 800044c:	68a8      	ldr	r0, [r5, #8]
 800044e:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
 8000452:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000456:	430b      	orrs	r3, r1
 8000458:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 800045c:	2300      	movs	r3, #0
 800045e:	9301      	str	r3, [sp, #4]
 8000460:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8000464:	f043 0301 	orr.w	r3, r3, #1
 8000468:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 800046c:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8000470:	f003 0301 	and.w	r3, r3, #1
 8000474:	9301      	str	r3, [sp, #4]
 8000476:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 8000478:	f7ff fef0 	bl	800025c <HAL_GetTick>
 800047c:	4606      	mov	r6, r0
  while(__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800047e:	6823      	ldr	r3, [r4, #0]
 8000480:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8000484:	05d2      	lsls	r2, r2, #23
 8000486:	d554      	bpl.n	8000532 <HAL_DSI_Init+0x146>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8000488:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << PLLInit->PLLODF))) / ((HSE_VALUE/1000U) * PLLInit->PLLNDIV);
 800048c:	6828      	ldr	r0, [r5, #0]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800048e:	f042 0206 	orr.w	r2, r2, #6
 8000492:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8000496:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800049a:	f022 0203 	bic.w	r2, r2, #3
 800049e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80004a2:	6862      	ldr	r2, [r4, #4]
 80004a4:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80004a8:	f042 0201 	orr.w	r2, r2, #1
 80004ac:	430a      	orrs	r2, r1
 80004ae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80004b2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80004b6:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80004b8:	f022 0203 	bic.w	r2, r2, #3
 80004bc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80004c0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80004c4:	430a      	orrs	r2, r1
 80004c6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80004ca:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80004cc:	68a1      	ldr	r1, [r4, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80004ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80004d2:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80004d4:	689a      	ldr	r2, [r3, #8]
 80004d6:	430a      	orrs	r2, r1
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80004d8:	6869      	ldr	r1, [r5, #4]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80004da:	609a      	str	r2, [r3, #8]
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80004dc:	2900      	cmp	r1, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << PLLInit->PLLODF))) / ((HSE_VALUE/1000U) * PLLInit->PLLNDIV);
 80004de:	4a19      	ldr	r2, [pc, #100]	; (8000544 <HAL_DSI_Init+0x158>)
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80004e0:	bf08      	it	eq
 80004e2:	2101      	moveq	r1, #1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << PLLInit->PLLODF))) / ((HSE_VALUE/1000U) * PLLInit->PLLNDIV);
 80004e4:	434a      	muls	r2, r1
 80004e6:	68a9      	ldr	r1, [r5, #8]
 80004e8:	408a      	lsls	r2, r1
 80004ea:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80004ee:	4341      	muls	r1, r0
 80004f0:	fbb2 f2f1 	udiv	r2, r2, r1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80004f4:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 80004f8:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80004fc:	f8c3 1418 	str.w	r1, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8000500:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 8000504:	2000      	movs	r0, #0
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8000506:	430a      	orrs	r2, r1
 8000508:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 800050c:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8000510:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  hdsi->State = HAL_DSI_STATE_READY;
 8000514:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8000516:	6160      	str	r0, [r4, #20]
  hdsi->ErrorMsk = 0U;
 8000518:	61a0      	str	r0, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 800051a:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 800051c:	e007      	b.n	800052e <HAL_DSI_Init+0x142>
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 800051e:	f7ff fe9d 	bl	800025c <HAL_GetTick>
 8000522:	1b80      	subs	r0, r0, r6
 8000524:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000528:	f67f af7e 	bls.w	8000428 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 800052c:	2003      	movs	r0, #3
}
 800052e:	b002      	add	sp, #8
 8000530:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 8000532:	f7ff fe93 	bl	800025c <HAL_GetTick>
 8000536:	1b80      	subs	r0, r0, r6
 8000538:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800053c:	d99f      	bls.n	800047e <HAL_DSI_Init+0x92>
 800053e:	e7f5      	b.n	800052c <HAL_DSI_Init+0x140>
    return HAL_ERROR;
 8000540:	2001      	movs	r0, #1
 8000542:	e7f4      	b.n	800052e <HAL_DSI_Init+0x142>
 8000544:	003d0900 	.word	0x003d0900

08000548 <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8000548:	7c03      	ldrb	r3, [r0, #16]
 800054a:	2b01      	cmp	r3, #1
 800054c:	d00b      	beq.n	8000566 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 800054e:	6803      	ldr	r3, [r0, #0]
 8000550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000552:	f022 0203 	bic.w	r2, r2, #3
 8000556:	631a      	str	r2, [r3, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8000558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800055a:	4311      	orrs	r1, r2
 800055c:	6319      	str	r1, [r3, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800055e:	2300      	movs	r3, #0
 8000560:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8000562:	4618      	mov	r0, r3
 8000564:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8000566:	2002      	movs	r0, #2
}
 8000568:	4770      	bx	lr

0800056a <HAL_DSI_ConfigAdaptedCommandMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800056a:	7c03      	ldrb	r3, [r0, #16]
 800056c:	2b01      	cmp	r3, #1
{
 800056e:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdsi);
 8000570:	d06a      	beq.n	8000648 <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8000572:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8000574:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8000576:	6b5a      	ldr	r2, [r3, #52]	; 0x34

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8000578:	698d      	ldr	r5, [r1, #24]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800057a:	f042 0201 	orr.w	r2, r2, #1
 800057e:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8000580:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8000584:	f022 0201 	bic.w	r2, r2, #1
 8000588:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 800058c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8000590:	f042 0201 	orr.w	r2, r2, #1
 8000594:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8000598:	68da      	ldr	r2, [r3, #12]
 800059a:	f022 0203 	bic.w	r2, r2, #3
 800059e:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80005a0:	68da      	ldr	r2, [r3, #12]
 80005a2:	4322      	orrs	r2, r4
 80005a4:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80005a6:	695a      	ldr	r2, [r3, #20]
 80005a8:	f022 0207 	bic.w	r2, r2, #7
 80005ac:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80005ae:	69ca      	ldr	r2, [r1, #28]
 80005b0:	695c      	ldr	r4, [r3, #20]
 80005b2:	432a      	orrs	r2, r5
 80005b4:	694d      	ldr	r5, [r1, #20]
 80005b6:	432a      	orrs	r2, r5
 80005b8:	4322      	orrs	r2, r4
 80005ba:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80005bc:	691a      	ldr	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80005be:	684d      	ldr	r5, [r1, #4]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80005c0:	f022 020f 	bic.w	r2, r2, #15
 80005c4:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 80005c6:	691c      	ldr	r4, [r3, #16]
 80005c8:	432c      	orrs	r4, r5
 80005ca:	611c      	str	r4, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80005cc:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 80005d0:	f024 040e 	bic.w	r4, r4, #14
 80005d4:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding)<<1U);
 80005d8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80005dc:	688c      	ldr	r4, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding)<<1U);
 80005de:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 80005e2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 80005e6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80005e8:	0c12      	lsrs	r2, r2, #16
 80005ea:	0412      	lsls	r2, r2, #16
 80005ec:	665a      	str	r2, [r3, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80005ee:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80005f0:	4322      	orrs	r2, r4
 80005f2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80005f4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh | CmdCfg->VSyncPol);
 80005f8:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80005fa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80005fe:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh | CmdCfg->VSyncPol);
 8000602:	68ca      	ldr	r2, [r1, #12]
 8000604:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 8000608:	432a      	orrs	r2, r5
 800060a:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800060c:	432a      	orrs	r2, r5
 800060e:	6a0d      	ldr	r5, [r1, #32]

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8000610:	6a89      	ldr	r1, [r1, #40]	; 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh | CmdCfg->VSyncPol);
 8000612:	432a      	orrs	r2, r5
 8000614:	4322      	orrs	r2, r4
 8000616:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 800061a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800061c:	f022 0201 	bic.w	r2, r2, #1
 8000620:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8000622:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000624:	430a      	orrs	r2, r1
 8000626:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8000628:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800062c:	f042 0201 	orr.w	r2, r2, #1
 8000630:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8000634:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8000638:	f042 0202 	orr.w	r2, r2, #2
 800063c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8000640:	2300      	movs	r3, #0
 8000642:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8000644:	4618      	mov	r0, r3
 8000646:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8000648:	2002      	movs	r0, #2
}
 800064a:	bd30      	pop	{r4, r5, pc}

0800064c <HAL_DSI_ConfigCommand>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800064c:	7c03      	ldrb	r3, [r0, #16]
 800064e:	2b01      	cmp	r3, #1
{
 8000650:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdsi);
 8000652:	d02a      	beq.n	80006aa <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX |\
 8000654:	6802      	ldr	r2, [r0, #0]
 8000656:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <HAL_DSI_ConfigCommand+0x64>)
 8000658:	6e94      	ldr	r4, [r2, #104]	; 0x68
 800065a:	4023      	ands	r3, r4
 800065c:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX |\
                            DSI_CMCR_DSW1TX |\
                            DSI_CMCR_DSR0TX |\
                            DSI_CMCR_DLWTX  |\
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  |\
 800065e:	e891 0028 	ldmia.w	r1, {r3, r5}
 8000662:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP |\
 8000664:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  |\
 8000666:	6e94      	ldr	r4, [r2, #104]	; 0x68
                           LPCmd->LPGenShortWriteOneP |\
 8000668:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP |\
 800066a:	68cd      	ldr	r5, [r1, #12]
 800066c:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   |\
 800066e:	690d      	ldr	r5, [r1, #16]
 8000670:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  |\
 8000672:	694d      	ldr	r5, [r1, #20]
 8000674:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  |\
 8000676:	698d      	ldr	r5, [r1, #24]
 8000678:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      |\
 800067a:	69cd      	ldr	r5, [r1, #28]
 800067c:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  |\
 800067e:	6a0d      	ldr	r5, [r1, #32]
 8000680:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP |\
 8000682:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8000684:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   |\
 8000686:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8000688:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      |\
 800068a:	6acd      	ldr	r5, [r1, #44]	; 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800068c:	6b09      	ldr	r1, [r1, #48]	; 0x30
                           LPCmd->LPDcsLongWrite      |\
 800068e:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  |\
 8000690:	4323      	orrs	r3, r4
 8000692:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8000694:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8000696:	f023 0302 	bic.w	r3, r3, #2
 800069a:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800069c:	6e93      	ldr	r3, [r2, #104]	; 0x68
 800069e:	430b      	orrs	r3, r1
 80006a0:	6693      	str	r3, [r2, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80006a2:	2300      	movs	r3, #0
 80006a4:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80006a6:	4618      	mov	r0, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80006aa:	2002      	movs	r0, #2
}
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop
 80006b0:	fef080ff 	.word	0xfef080ff

080006b4 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80006b4:	7c03      	ldrb	r3, [r0, #16]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d00b      	beq.n	80006d2 <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80006ba:	6803      	ldr	r3, [r0, #0]
 80006bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006be:	f022 021f 	bic.w	r2, r2, #31
 80006c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80006c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006c6:	4311      	orrs	r1, r2
 80006c8:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80006ca:	2300      	movs	r3, #0
 80006cc:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80006ce:	4618      	mov	r0, r3
 80006d0:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80006d2:	2002      	movs	r0, #2
}
 80006d4:	4770      	bx	lr

080006d6 <HAL_DSI_ConfigPhyTimer>:
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80006d6:	7c03      	ldrb	r3, [r0, #16]
 80006d8:	2b01      	cmp	r3, #1
{
 80006da:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdsi);
 80006dc:	d035      	beq.n	800074a <HAL_DSI_ConfigPhyTimer+0x74>

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime)? PhyTimers->ClockLaneLP2HSTime: PhyTimers->ClockLaneHS2LPTime;
 80006de:	e891 0014 	ldmia.w	r1, {r2, r4}
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
  */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80006e2:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime)<<16U));

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime)<<16U) | ((PhyTimers->DataLaneHS2LPTime)<<24U));
 80006e4:	68cd      	ldr	r5, [r1, #12]
  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime)? PhyTimers->ClockLaneLP2HSTime: PhyTimers->ClockLaneHS2LPTime;
 80006e6:	4294      	cmp	r4, r2
 80006e8:	bf38      	it	cc
 80006ea:	4614      	movcc	r4, r2
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80006ec:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80006f0:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80006f4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime)<<16U));
 80006f8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80006fc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8000700:	4322      	orrs	r2, r4
 8000702:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8000706:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800070a:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800070e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime)<<16U) | ((PhyTimers->DataLaneHS2LPTime)<<24U));
 8000712:	688a      	ldr	r2, [r1, #8]
 8000714:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 8000718:	0612      	lsls	r2, r2, #24
 800071a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 800071e:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime)<<8U);
 8000720:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime)<<16U) | ((PhyTimers->DataLaneHS2LPTime)<<24U));
 8000722:	432a      	orrs	r2, r5
 8000724:	4322      	orrs	r2, r4
 8000726:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800072a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800072e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000732:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime)<<8U);
 8000736:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800073a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800073e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8000742:	2300      	movs	r3, #0
 8000744:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8000746:	4618      	mov	r0, r3
 8000748:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800074a:	2002      	movs	r0, #2
}
 800074c:	bd30      	pop	{r4, r5, pc}
	...

08000750 <HAL_DSI_ConfigHostTimeouts>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8000750:	7c03      	ldrb	r3, [r0, #16]
 8000752:	2b01      	cmp	r3, #1
{
 8000754:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdsi);
 8000756:	d05c      	beq.n	8000812 <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8000758:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv)<<8U);
 800075a:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800075c:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout)<<16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800075e:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8000760:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000764:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv)<<8U);
 8000766:	689a      	ldr	r2, [r3, #8]
 8000768:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800076c:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 800076e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout)<<16U);
 8000770:	684c      	ldr	r4, [r1, #4]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8000772:	b292      	uxth	r2, r2
 8000774:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout)<<16U);
 8000776:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8000778:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800077c:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800077e:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8000780:	4a25      	ldr	r2, [pc, #148]	; (8000818 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 8000782:	4014      	ands	r4, r2
 8000784:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8000786:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8000788:	432c      	orrs	r4, r5
 800078a:	679c      	str	r4, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 800078c:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800078e:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8000790:	4014      	ands	r4, r2
 8000792:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8000794:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 8000796:	432c      	orrs	r4, r5
 8000798:	67dc      	str	r4, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800079a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800079e:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80007a0:	4014      	ands	r4, r2
 80007a2:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80007a6:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80007aa:	432c      	orrs	r4, r5
 80007ac:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80007b0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80007b4:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80007b6:	4014      	ands	r4, r2
 80007b8:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80007bc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80007c0:	432c      	orrs	r4, r5
 80007c2:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 80007c6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80007ca:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 80007ce:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80007d2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80007d6:	698d      	ldr	r5, [r1, #24]
 80007d8:	432c      	orrs	r4, r5
 80007da:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80007de:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80007e2:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80007e4:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80007e6:	4014      	ands	r4, r2
 80007e8:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80007ec:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 80007f0:	432c      	orrs	r4, r5
 80007f2:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80007f6:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 80007fa:	4022      	ands	r2, r4
 80007fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8000800:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8000804:	430a      	orrs	r2, r1
 8000806:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800080a:	2300      	movs	r3, #0
 800080c:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800080e:	4618      	mov	r0, r3
 8000810:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8000812:	2002      	movs	r0, #2
}
 8000814:	bd30      	pop	{r4, r5, pc}
 8000816:	bf00      	nop
 8000818:	ffff0000 	.word	0xffff0000

0800081c <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800081c:	7c03      	ldrb	r3, [r0, #16]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d010      	beq.n	8000844 <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8000822:	6803      	ldr	r3, [r0, #0]
 8000824:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8000828:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 800082c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency<<25U;
 8000830:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8000834:	ea42 6141 	orr.w	r1, r2, r1, lsl #25
 8000838:	f8c3 141c 	str.w	r1, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800083c:	2300      	movs	r3, #0
 800083e:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8000840:	4618      	mov	r0, r3
 8000842:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8000844:	2002      	movs	r0, #2
}
 8000846:	4770      	bx	lr

08000848 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000848:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800084c:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000850:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 80009f4 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000854:	4a65      	ldr	r2, [pc, #404]	; (80009ec <HAL_GPIO_Init+0x1a4>)
  uint32_t position = 0x00u;
 8000856:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000858:	fa38 f403 	lsrs.w	r4, r8, r3
 800085c:	d102      	bne.n	8000864 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 800085e:	b003      	add	sp, #12
 8000860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000864:	f04f 0e01 	mov.w	lr, #1
 8000868:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 800086c:	ea18 060e 	ands.w	r6, r8, lr
 8000870:	f000 80ab 	beq.w	80009ca <HAL_GPIO_Init+0x182>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000874:	684c      	ldr	r4, [r1, #4]
 8000876:	f024 0710 	bic.w	r7, r4, #16
 800087a:	2f02      	cmp	r7, #2
 800087c:	d116      	bne.n	80008ac <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 800087e:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000882:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000886:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 800088a:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800088e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000892:	f04f 0c0f 	mov.w	ip, #15
 8000896:	fa0c fc0b 	lsl.w	ip, ip, fp
 800089a:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800089e:	690d      	ldr	r5, [r1, #16]
 80008a0:	fa05 f50b 	lsl.w	r5, r5, fp
 80008a4:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 80008a8:	f8ca 5020 	str.w	r5, [sl, #32]
 80008ac:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80008b0:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80008b2:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80008b6:	fa05 f50a 	lsl.w	r5, r5, sl
 80008ba:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008bc:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80008c0:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008c4:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008c8:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008ca:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ce:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80008d0:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008d4:	d811      	bhi.n	80008fa <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80008d6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008d8:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008dc:	68cf      	ldr	r7, [r1, #12]
 80008de:	fa07 fc0a 	lsl.w	ip, r7, sl
 80008e2:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80008e6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80008e8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008ea:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008ee:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80008f2:	409f      	lsls	r7, r3
 80008f4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80008f8:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80008fa:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80008fc:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008fe:	688f      	ldr	r7, [r1, #8]
 8000900:	fa07 f70a 	lsl.w	r7, r7, sl
 8000904:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000906:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000908:	00e5      	lsls	r5, r4, #3
 800090a:	d55e      	bpl.n	80009ca <HAL_GPIO_Init+0x182>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090c:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8000910:	f045 0501 	orr.w	r5, r5, #1
 8000914:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 8000918:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 800091c:	f023 0703 	bic.w	r7, r3, #3
 8000920:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000924:	f005 0501 	and.w	r5, r5, #1
 8000928:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800092c:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800092e:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000932:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000934:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000938:	f04f 0c0f 	mov.w	ip, #15
 800093c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000940:	fa0c f50e 	lsl.w	r5, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000944:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000948:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800094c:	d03f      	beq.n	80009ce <HAL_GPIO_Init+0x186>
 800094e:	4d28      	ldr	r5, [pc, #160]	; (80009f0 <HAL_GPIO_Init+0x1a8>)
 8000950:	42a8      	cmp	r0, r5
 8000952:	d03e      	beq.n	80009d2 <HAL_GPIO_Init+0x18a>
 8000954:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000958:	42a8      	cmp	r0, r5
 800095a:	d03c      	beq.n	80009d6 <HAL_GPIO_Init+0x18e>
 800095c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000960:	42a8      	cmp	r0, r5
 8000962:	d03a      	beq.n	80009da <HAL_GPIO_Init+0x192>
 8000964:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000968:	42a8      	cmp	r0, r5
 800096a:	d038      	beq.n	80009de <HAL_GPIO_Init+0x196>
 800096c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000970:	42a8      	cmp	r0, r5
 8000972:	d036      	beq.n	80009e2 <HAL_GPIO_Init+0x19a>
 8000974:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000978:	42a8      	cmp	r0, r5
 800097a:	d034      	beq.n	80009e6 <HAL_GPIO_Init+0x19e>
 800097c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000980:	42a8      	cmp	r0, r5
 8000982:	bf14      	ite	ne
 8000984:	2508      	movne	r5, #8
 8000986:	2507      	moveq	r5, #7
 8000988:	fa05 f50e 	lsl.w	r5, r5, lr
 800098c:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000990:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR1;
 8000992:	6815      	ldr	r5, [r2, #0]
        temp &= ~(iocurrent);
 8000994:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000996:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 800099a:	bf0c      	ite	eq
 800099c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800099e:	4335      	orrne	r5, r6
        EXTI->IMR1 = temp;
 80009a0:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR1;
 80009a2:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009a4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 80009a8:	bf0c      	ite	eq
 80009aa:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80009ac:	4335      	orrne	r5, r6
        EXTI->EMR1 = temp;
 80009ae:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR1;
 80009b0:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009b2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 80009b6:	bf0c      	ite	eq
 80009b8:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80009ba:	4335      	orrne	r5, r6
        EXTI->RTSR1 = temp;
 80009bc:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR1;
 80009be:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009c0:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 80009c2:	bf54      	ite	pl
 80009c4:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80009c6:	4335      	orrmi	r5, r6
        EXTI->FTSR1 = temp;
 80009c8:	60d5      	str	r5, [r2, #12]
    position++;
 80009ca:	3301      	adds	r3, #1
 80009cc:	e744      	b.n	8000858 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009ce:	2500      	movs	r5, #0
 80009d0:	e7da      	b.n	8000988 <HAL_GPIO_Init+0x140>
 80009d2:	2501      	movs	r5, #1
 80009d4:	e7d8      	b.n	8000988 <HAL_GPIO_Init+0x140>
 80009d6:	2502      	movs	r5, #2
 80009d8:	e7d6      	b.n	8000988 <HAL_GPIO_Init+0x140>
 80009da:	2503      	movs	r5, #3
 80009dc:	e7d4      	b.n	8000988 <HAL_GPIO_Init+0x140>
 80009de:	2504      	movs	r5, #4
 80009e0:	e7d2      	b.n	8000988 <HAL_GPIO_Init+0x140>
 80009e2:	2505      	movs	r5, #5
 80009e4:	e7d0      	b.n	8000988 <HAL_GPIO_Init+0x140>
 80009e6:	2506      	movs	r5, #6
 80009e8:	e7ce      	b.n	8000988 <HAL_GPIO_Init+0x140>
 80009ea:	bf00      	nop
 80009ec:	40010400 	.word	0x40010400
 80009f0:	48000400 	.word	0x48000400
 80009f4:	40021000 	.word	0x40021000

080009f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80009f8:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80009fa:	4604      	mov	r4, r0
 80009fc:	2800      	cmp	r0, #0
 80009fe:	d04a      	beq.n	8000a96 <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000a00:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000a04:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000a08:	b91b      	cbnz	r3, 8000a12 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000a0a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000a0e:	f001 fc33 	bl	8002278 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000a12:	2324      	movs	r3, #36	; 0x24
 8000a14:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000a18:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000a1a:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	f022 0201 	bic.w	r2, r2, #1
 8000a22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000a24:	6862      	ldr	r2, [r4, #4]
 8000a26:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000a2a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000a2c:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000a2e:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000a30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000a38:	d124      	bne.n	8000a84 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000a3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a3e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000a40:	685a      	ldr	r2, [r3, #4]
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000a42:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000a44:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000a48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a4c:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000a4e:	68da      	ldr	r2, [r3, #12]
 8000a50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000a54:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000a56:	6922      	ldr	r2, [r4, #16]
 8000a58:	430a      	orrs	r2, r1
 8000a5a:	69a1      	ldr	r1, [r4, #24]
 8000a5c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000a60:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000a62:	6a21      	ldr	r1, [r4, #32]
 8000a64:	69e2      	ldr	r2, [r4, #28]
 8000a66:	430a      	orrs	r2, r1
 8000a68:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	f042 0201 	orr.w	r2, r2, #1
 8000a70:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a72:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000a74:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a76:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000a78:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000a7c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a7e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 8000a82:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000a84:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000a88:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000a8a:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000a8c:	bf04      	itt	eq
 8000a8e:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8000a92:	605a      	streq	r2, [r3, #4]
 8000a94:	e7d4      	b.n	8000a40 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8000a96:	2001      	movs	r0, #1
}
 8000a98:	bd10      	pop	{r4, pc}

08000a9a <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a9a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000a9e:	b2d2      	uxtb	r2, r2
 8000aa0:	2a20      	cmp	r2, #32
{
 8000aa2:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000aa4:	d11d      	bne.n	8000ae2 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000aa6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d019      	beq.n	8000ae2 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000aae:	2324      	movs	r3, #36	; 0x24
 8000ab0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000ab4:	6803      	ldr	r3, [r0, #0]
 8000ab6:	681c      	ldr	r4, [r3, #0]
 8000ab8:	f024 0401 	bic.w	r4, r4, #1
 8000abc:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000abe:	681c      	ldr	r4, [r3, #0]
 8000ac0:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8000ac4:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000ac6:	681c      	ldr	r4, [r3, #0]
 8000ac8:	4321      	orrs	r1, r4
 8000aca:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000acc:	6819      	ldr	r1, [r3, #0]
 8000ace:	f041 0101 	orr.w	r1, r1, #1
 8000ad2:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ad4:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000ad6:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000ada:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000ade:	4618      	mov	r0, r3
 8000ae0:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000ae2:	2002      	movs	r0, #2
  }
}
 8000ae4:	bd10      	pop	{r4, pc}

08000ae6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000ae6:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ae8:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8000aec:	b2e4      	uxtb	r4, r4
 8000aee:	2c20      	cmp	r4, #32
 8000af0:	d11c      	bne.n	8000b2c <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000af2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d018      	beq.n	8000b2c <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000afa:	2324      	movs	r3, #36	; 0x24
 8000afc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000b00:	6803      	ldr	r3, [r0, #0]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	f022 0201 	bic.w	r2, r2, #1
 8000b08:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000b0a:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000b0c:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000b10:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000b14:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	f042 0201 	orr.w	r2, r2, #1
 8000b1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000b1e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000b20:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8000b24:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000b28:	4618      	mov	r0, r3
 8000b2a:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8000b2c:	2002      	movs	r0, #2
  }
}
 8000b2e:	bd10      	pop	{r4, pc}

08000b30 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8000b30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000b34:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8000b36:	6804      	ldr	r4, [r0, #0]
 8000b38:	684f      	ldr	r7, [r1, #4]
 8000b3a:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8000b3c:	f8d1 e000 	ldr.w	lr, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8000b40:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000b44:	3284      	adds	r2, #132	; 0x84
 8000b46:	18a3      	adds	r3, r4, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8000b48:	f10e 0601 	add.w	r6, lr, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000b4c:	6858      	ldr	r0, [r3, #4]
 8000b4e:	f000 20f0 	and.w	r0, r0, #4026593280	; 0xf000f000
 8000b52:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8000b54:	68e0      	ldr	r0, [r4, #12]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8000b56:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8000b5a:	f3c0 400b 	ubfx	r0, r0, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8000b5e:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8000b60:	4430      	add	r0, r6
 8000b62:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b66:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8000b68:	68e0      	ldr	r0, [r4, #12]
 8000b6a:	68cd      	ldr	r5, [r1, #12]
 8000b6c:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8000b70:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8000b72:	6898      	ldr	r0, [r3, #8]
 8000b74:	f000 20f0 	and.w	r0, r0, #4026593280	; 0xf000f000
 8000b78:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8000b7a:	68e6      	ldr	r6, [r4, #12]
 8000b7c:	6888      	ldr	r0, [r1, #8]
 8000b7e:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8000b82:	3001      	adds	r0, #1
 8000b84:	4430      	add	r0, r6
 8000b86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b8a:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8000b8c:	6918      	ldr	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8000b8e:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8000b90:	f020 0007 	bic.w	r0, r0, #7
 8000b94:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8000b96:	f04f 0c00 	mov.w	ip, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8000b9a:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8000b9c:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8000b9e:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8000ba2:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8000ba6:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8000baa:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8000bae:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8000bb2:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8000bb6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000bba:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8000bbc:	6958      	ldr	r0, [r3, #20]
 8000bbe:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8000bc2:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8000bc4:	6948      	ldr	r0, [r1, #20]
 8000bc6:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8000bc8:	69d8      	ldr	r0, [r3, #28]
 8000bca:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8000bce:	f020 0007 	bic.w	r0, r0, #7
 8000bd2:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8000bd4:	6a08      	ldr	r0, [r1, #32]
 8000bd6:	69cd      	ldr	r5, [r1, #28]
 8000bd8:	4305      	orrs	r5, r0
 8000bda:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8000bdc:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8000bde:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8000be0:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8000be4:	6298      	str	r0, [r3, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8000be6:	b31e      	cbz	r6, 8000c30 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8000be8:	2e01      	cmp	r6, #1
 8000bea:	d023      	beq.n	8000c34 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8000bec:	1eb0      	subs	r0, r6, #2
 8000bee:	2802      	cmp	r0, #2
 8000bf0:	d922      	bls.n	8000c38 <LTDC_SetConfig+0x108>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8000bf2:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8000bf4:	bf0c      	ite	eq
 8000bf6:	2002      	moveq	r0, #2
 8000bf8:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8000bfa:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8000bfc:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8000c00:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8000c02:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8000c04:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8000c06:	eba7 070e 	sub.w	r7, r7, lr
 8000c0a:	4345      	muls	r5, r0
 8000c0c:	4378      	muls	r0, r7
 8000c0e:	3003      	adds	r0, #3
 8000c10:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c14:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8000c16:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000c18:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8000c1c:	f020 0007 	bic.w	r0, r0, #7
 8000c20:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8000c22:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8000c24:	58a3      	ldr	r3, [r4, r2]
 8000c26:	f043 0301 	orr.w	r3, r3, #1
 8000c2a:	50a3      	str	r3, [r4, r2]
 8000c2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8000c30:	2004      	movs	r0, #4
 8000c32:	e7e2      	b.n	8000bfa <LTDC_SetConfig+0xca>
    tmp = 3U;
 8000c34:	2003      	movs	r0, #3
 8000c36:	e7e0      	b.n	8000bfa <LTDC_SetConfig+0xca>
    tmp = 2U;
 8000c38:	2002      	movs	r0, #2
 8000c3a:	e7de      	b.n	8000bfa <LTDC_SetConfig+0xca>

08000c3c <HAL_LTDC_Init>:
{
 8000c3c:	b538      	push	{r3, r4, r5, lr}
  if(hltdc == NULL)
 8000c3e:	4604      	mov	r4, r0
 8000c40:	2800      	cmp	r0, #0
 8000c42:	d063      	beq.n	8000d0c <HAL_LTDC_Init+0xd0>
  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8000c44:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8000c48:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c4c:	b91b      	cbnz	r3, 8000c56 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8000c4e:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8000c52:	f001 fb7f 	bl	8002354 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8000c56:	2302      	movs	r3, #2
 8000c58:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8000c5c:	6823      	ldr	r3, [r4, #0]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000c5e:	68a0      	ldr	r0, [r4, #8]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8000c60:	699a      	ldr	r2, [r3, #24]
 8000c62:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8000c66:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000c68:	6862      	ldr	r2, [r4, #4]
 8000c6a:	6999      	ldr	r1, [r3, #24]
 8000c6c:	4302      	orrs	r2, r0
 8000c6e:	68e0      	ldr	r0, [r4, #12]
 8000c70:	4302      	orrs	r2, r0
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8000c72:	6920      	ldr	r0, [r4, #16]
 8000c74:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000c76:	430a      	orrs	r2, r1
 8000c78:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8000c7a:	689a      	ldr	r2, [r3, #8]
 8000c7c:	4924      	ldr	r1, [pc, #144]	; (8000d10 <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8000c7e:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8000c80:	400a      	ands	r2, r1
 8000c82:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8000c84:	689a      	ldr	r2, [r3, #8]
 8000c86:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c8a:	69a0      	ldr	r0, [r4, #24]
 8000c8c:	4302      	orrs	r2, r0
 8000c8e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8000c90:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8000c92:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8000c94:	400a      	ands	r2, r1
 8000c96:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8000c98:	68da      	ldr	r2, [r3, #12]
 8000c9a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c9e:	6a20      	ldr	r0, [r4, #32]
 8000ca0:	4302      	orrs	r2, r0
 8000ca2:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8000ca4:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8000ca6:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8000ca8:	400a      	ands	r2, r1
 8000caa:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8000cac:	691a      	ldr	r2, [r3, #16]
 8000cae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cb2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000cb4:	4302      	orrs	r2, r0
 8000cb6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8000cb8:	695a      	ldr	r2, [r3, #20]
 8000cba:	4011      	ands	r1, r2
 8000cbc:	6159      	str	r1, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8000cbe:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8000cc0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8000cc2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cc6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8000ccc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8000cce:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8000cd2:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8000cd6:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8000cda:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8000cdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000cde:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8000ce8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cec:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8000cee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cf0:	f042 0206 	orr.w	r2, r2, #6
 8000cf4:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8000cf6:	699a      	ldr	r2, [r3, #24]
 8000cf8:	f042 0201 	orr.w	r2, r2, #1
 8000cfc:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8000cfe:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8000d00:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8000d02:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8000d06:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  return HAL_OK;
 8000d0a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000d0c:	2001      	movs	r0, #1
}
 8000d0e:	bd38      	pop	{r3, r4, r5, pc}
 8000d10:	f000f800 	.word	0xf000f800

08000d14 <HAL_LTDC_ConfigLayer>:
{
 8000d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8000d16:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8000d1a:	2b01      	cmp	r3, #1
{
 8000d1c:	4606      	mov	r6, r0
 8000d1e:	468e      	mov	lr, r1
 8000d20:	4694      	mov	ip, r2
 8000d22:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 8000d26:	d01d      	beq.n	8000d64 <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8000d28:	2434      	movs	r4, #52	; 0x34
 8000d2a:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8000d2c:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8000d30:	fb04 6402 	mla	r4, r4, r2, r6
 8000d34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  __HAL_LOCK(hltdc);
 8000d36:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8000d38:	3438      	adds	r4, #56	; 0x38
  __HAL_LOCK(hltdc);
 8000d3a:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8000d3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d48:	682b      	ldr	r3, [r5, #0]
 8000d4a:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4662      	mov	r2, ip
 8000d50:	4671      	mov	r1, lr
 8000d52:	f7ff feed 	bl	8000b30 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8000d56:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8000d58:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8000d5a:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8000d5c:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8000d60:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8000d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000d68 <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d68:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <HAL_PWREx_GetVoltageRange+0x20>)
 8000d6a:	6818      	ldr	r0, [r3, #0]
 8000d6c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8000d70:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8000d74:	d007      	beq.n	8000d86 <HAL_PWREx_GetVoltageRange+0x1e>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8000d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d7a:	f413 7f80 	tst.w	r3, #256	; 0x100
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8000d7e:	bf14      	ite	ne
 8000d80:	f44f 7000 	movne.w	r0, #512	; 0x200
 8000d84:	2000      	moveq	r0, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8000d86:	4770      	bx	lr
 8000d88:	40007000 	.word	0x40007000

08000d8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d8c:	4b29      	ldr	r3, [pc, #164]	; (8000e34 <HAL_PWREx_ControlVoltageScaling+0xa8>)

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d8e:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000d90:	bb28      	cbnz	r0, 8000dde <HAL_PWREx_ControlVoltageScaling+0x52>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d92:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 8000d96:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d9a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000d9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000da2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000da6:	d119      	bne.n	8000ddc <HAL_PWREx_ControlVoltageScaling+0x50>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000dae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000db2:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000db4:	4a20      	ldr	r2, [pc, #128]	; (8000e38 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8000db6:	6811      	ldr	r1, [r2, #0]
 8000db8:	2232      	movs	r2, #50	; 0x32
 8000dba:	434a      	muls	r2, r1
 8000dbc:	491f      	ldr	r1, [pc, #124]	; (8000e3c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8000dbe:	fbb2 f2f1 	udiv	r2, r2, r1
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000dc6:	6958      	ldr	r0, [r3, #20]
 8000dc8:	0540      	lsls	r0, r0, #21
 8000dca:	d500      	bpl.n	8000dce <HAL_PWREx_ControlVoltageScaling+0x42>
 8000dcc:	b922      	cbnz	r2, 8000dd8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000dce:	694b      	ldr	r3, [r1, #20]
 8000dd0:	055b      	lsls	r3, r3, #21
 8000dd2:	d52d      	bpl.n	8000e30 <HAL_PWREx_ControlVoltageScaling+0xa4>
      {
        return HAL_TIMEOUT;
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	4770      	bx	lr
        wait_loop_index--;
 8000dd8:	3a01      	subs	r2, #1
 8000dda:	e7f4      	b.n	8000dc6 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8000ddc:	4770      	bx	lr
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dde:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000de2:	d120      	bne.n	8000e26 <HAL_PWREx_ControlVoltageScaling+0x9a>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000de4:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 8000de8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000dec:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000df0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000df4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000df8:	d11a      	bne.n	8000e30 <HAL_PWREx_ControlVoltageScaling+0xa4>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000e00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e04:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000e06:	4a0c      	ldr	r2, [pc, #48]	; (8000e38 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8000e08:	6811      	ldr	r1, [r2, #0]
 8000e0a:	2232      	movs	r2, #50	; 0x32
 8000e0c:	434a      	muls	r2, r1
 8000e0e:	490b      	ldr	r1, [pc, #44]	; (8000e3c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8000e10:	fbb2 f2f1 	udiv	r2, r2, r1
 8000e14:	4619      	mov	r1, r3
 8000e16:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e18:	6958      	ldr	r0, [r3, #20]
 8000e1a:	0540      	lsls	r0, r0, #21
 8000e1c:	d5d7      	bpl.n	8000dce <HAL_PWREx_ControlVoltageScaling+0x42>
 8000e1e:	2a00      	cmp	r2, #0
 8000e20:	d0d5      	beq.n	8000dce <HAL_PWREx_ControlVoltageScaling+0x42>
      {
        wait_loop_index--;
 8000e22:	3a01      	subs	r2, #1
 8000e24:	e7f8      	b.n	8000e18 <HAL_PWREx_ControlVoltageScaling+0x8c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e26:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8000e2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e2e:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e30:	2000      	movs	r0, #0
}
 8000e32:	4770      	bx	lr
 8000e34:	40007000 	.word	0x40007000
 8000e38:	20000000 	.word	0x20000000
 8000e3c:	000f4240 	.word	0x000f4240

08000e40 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8000e40:	4a02      	ldr	r2, [pc, #8]	; (8000e4c <HAL_PWREx_EnableVddIO2+0xc>)
 8000e42:	6853      	ldr	r3, [r2, #4]
 8000e44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e48:	6053      	str	r3, [r2, #4]
 8000e4a:	4770      	bx	lr
 8000e4c:	40007000 	.word	0x40007000

08000e50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000e50:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000e52:	4d1c      	ldr	r5, [pc, #112]	; (8000ec4 <RCC_SetFlashLatencyFromMSIRange+0x74>)
 8000e54:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000e56:	00da      	lsls	r2, r3, #3
{
 8000e58:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000e5a:	d518      	bpl.n	8000e8e <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000e5c:	f7ff ff84 	bl	8000d68 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e60:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000e64:	d123      	bne.n	8000eae <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8000e66:	2c80      	cmp	r4, #128	; 0x80
 8000e68:	d928      	bls.n	8000ebc <RCC_SetFlashLatencyFromMSIRange+0x6c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8000e6a:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000e6c:	bf8c      	ite	hi
 8000e6e:	2002      	movhi	r0, #2
 8000e70:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8000e72:	4a15      	ldr	r2, [pc, #84]	; (8000ec8 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8000e74:	6813      	ldr	r3, [r2, #0]
 8000e76:	f023 030f 	bic.w	r3, r3, #15
 8000e7a:	4303      	orrs	r3, r0
 8000e7c:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8000e7e:	6813      	ldr	r3, [r2, #0]
 8000e80:	f003 030f 	and.w	r3, r3, #15
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8000e84:	1a18      	subs	r0, r3, r0
 8000e86:	bf18      	it	ne
 8000e88:	2001      	movne	r0, #1
 8000e8a:	b003      	add	sp, #12
 8000e8c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8000e8e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e94:	65ab      	str	r3, [r5, #88]	; 0x58
 8000e96:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9c:	9301      	str	r3, [sp, #4]
 8000e9e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000ea0:	f7ff ff62 	bl	8000d68 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8000ea4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000ea6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000eaa:	65ab      	str	r3, [r5, #88]	; 0x58
 8000eac:	e7d8      	b.n	8000e60 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange >= RCC_MSIRANGE_8)
 8000eae:	2c7f      	cmp	r4, #127	; 0x7f
 8000eb0:	d806      	bhi.n	8000ec0 <RCC_SetFlashLatencyFromMSIRange+0x70>
      if(msirange == RCC_MSIRANGE_7)
 8000eb2:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8000eb6:	4258      	negs	r0, r3
 8000eb8:	4158      	adcs	r0, r3
 8000eba:	e7da      	b.n	8000e72 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	e7d8      	b.n	8000e72 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8000ec0:	2002      	movs	r0, #2
 8000ec2:	e7d6      	b.n	8000e72 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40022000 	.word	0x40022000

08000ecc <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ecc:	4b25      	ldr	r3, [pc, #148]	; (8000f64 <HAL_RCC_GetSysClockFreq+0x98>)
 8000ece:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ed0:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000ed2:	f012 020c 	ands.w	r2, r2, #12
 8000ed6:	d005      	beq.n	8000ee4 <HAL_RCC_GetSysClockFreq+0x18>
 8000ed8:	2a0c      	cmp	r2, #12
 8000eda:	d115      	bne.n	8000f08 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000edc:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000ee0:	2901      	cmp	r1, #1
 8000ee2:	d118      	bne.n	8000f16 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000ee4:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8000ee6:	4820      	ldr	r0, [pc, #128]	; (8000f68 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000ee8:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000eea:	bf55      	itete	pl
 8000eec:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000ef0:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000ef2:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000ef6:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8000efa:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000efe:	b382      	cbz	r2, 8000f62 <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000f00:	2a0c      	cmp	r2, #12
 8000f02:	d009      	beq.n	8000f18 <HAL_RCC_GetSysClockFreq+0x4c>
 8000f04:	2000      	movs	r0, #0
  return sysclockfreq;
 8000f06:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000f08:	2a04      	cmp	r2, #4
 8000f0a:	d029      	beq.n	8000f60 <HAL_RCC_GetSysClockFreq+0x94>
 8000f0c:	2a08      	cmp	r2, #8
 8000f0e:	4817      	ldr	r0, [pc, #92]	; (8000f6c <HAL_RCC_GetSysClockFreq+0xa0>)
 8000f10:	bf18      	it	ne
 8000f12:	2000      	movne	r0, #0
 8000f14:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000f16:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000f18:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000f1a:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000f1c:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000f20:	f3c2 1203 	ubfx	r2, r2, #4, #4
    switch (pllsource)
 8000f24:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000f26:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8000f2a:	d005      	beq.n	8000f38 <HAL_RCC_GetSysClockFreq+0x6c>
 8000f2c:	2903      	cmp	r1, #3
 8000f2e:	d012      	beq.n	8000f56 <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000f30:	68d9      	ldr	r1, [r3, #12]
 8000f32:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8000f36:	e003      	b.n	8000f40 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000f38:	68d9      	ldr	r1, [r3, #12]
 8000f3a:	480d      	ldr	r0, [pc, #52]	; (8000f70 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000f3c:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000f40:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000f42:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000f46:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8000f4a:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000f4c:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000f4e:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8000f50:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f54:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000f56:	68d9      	ldr	r1, [r3, #12]
 8000f58:	4804      	ldr	r0, [pc, #16]	; (8000f6c <HAL_RCC_GetSysClockFreq+0xa0>)
 8000f5a:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8000f5e:	e7ef      	b.n	8000f40 <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 8000f60:	4803      	ldr	r0, [pc, #12]	; (8000f70 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8000f62:	4770      	bx	lr
 8000f64:	40021000 	.word	0x40021000
 8000f68:	080024cc 	.word	0x080024cc
 8000f6c:	007a1200 	.word	0x007a1200
 8000f70:	00f42400 	.word	0x00f42400

08000f74 <HAL_RCC_OscConfig>:
{
 8000f74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8000f78:	4605      	mov	r5, r0
 8000f7a:	b908      	cbnz	r0, 8000f80 <HAL_RCC_OscConfig+0xc>
      return HAL_ERROR;
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	e046      	b.n	800100e <HAL_RCC_OscConfig+0x9a>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f80:	4ca8      	ldr	r4, [pc, #672]	; (8001224 <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f82:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f84:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f86:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f88:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f8a:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f8e:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f92:	d572      	bpl.n	800107a <HAL_RCC_OscConfig+0x106>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f94:	b11e      	cbz	r6, 8000f9e <HAL_RCC_OscConfig+0x2a>
 8000f96:	2e0c      	cmp	r6, #12
 8000f98:	d151      	bne.n	800103e <HAL_RCC_OscConfig+0xca>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000f9a:	2f01      	cmp	r7, #1
 8000f9c:	d14f      	bne.n	800103e <HAL_RCC_OscConfig+0xca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f9e:	6823      	ldr	r3, [r4, #0]
 8000fa0:	0799      	lsls	r1, r3, #30
 8000fa2:	d502      	bpl.n	8000faa <HAL_RCC_OscConfig+0x36>
 8000fa4:	69ab      	ldr	r3, [r5, #24]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d0e8      	beq.n	8000f7c <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000faa:	6823      	ldr	r3, [r4, #0]
 8000fac:	6a28      	ldr	r0, [r5, #32]
 8000fae:	071a      	lsls	r2, r3, #28
 8000fb0:	bf56      	itet	pl
 8000fb2:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8000fb6:	6823      	ldrmi	r3, [r4, #0]
 8000fb8:	091b      	lsrpl	r3, r3, #4
 8000fba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fbe:	4283      	cmp	r3, r0
 8000fc0:	d228      	bcs.n	8001014 <HAL_RCC_OscConfig+0xa0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fc2:	f7ff ff45 	bl	8000e50 <RCC_SetFlashLatencyFromMSIRange>
 8000fc6:	2800      	cmp	r0, #0
 8000fc8:	d1d8      	bne.n	8000f7c <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fca:	6823      	ldr	r3, [r4, #0]
 8000fcc:	f043 0308 	orr.w	r3, r3, #8
 8000fd0:	6023      	str	r3, [r4, #0]
 8000fd2:	6823      	ldr	r3, [r4, #0]
 8000fd4:	6a2a      	ldr	r2, [r5, #32]
 8000fd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fde:	6863      	ldr	r3, [r4, #4]
 8000fe0:	69ea      	ldr	r2, [r5, #28]
 8000fe2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000fe6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000fea:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000fec:	f7ff ff6e 	bl	8000ecc <HAL_RCC_GetSysClockFreq>
 8000ff0:	68a3      	ldr	r3, [r4, #8]
 8000ff2:	4a8d      	ldr	r2, [pc, #564]	; (8001228 <HAL_RCC_OscConfig+0x2b4>)
 8000ff4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ff8:	5cd3      	ldrb	r3, [r2, r3]
 8000ffa:	f003 031f 	and.w	r3, r3, #31
 8000ffe:	40d8      	lsrs	r0, r3
 8001000:	4b8a      	ldr	r3, [pc, #552]	; (800122c <HAL_RCC_OscConfig+0x2b8>)
 8001002:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001004:	2000      	movs	r0, #0
 8001006:	f7ff f8f9 	bl	80001fc <HAL_InitTick>
        if(status != HAL_OK)
 800100a:	2800      	cmp	r0, #0
 800100c:	d035      	beq.n	800107a <HAL_RCC_OscConfig+0x106>
}
 800100e:	b003      	add	sp, #12
 8001010:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001014:	6823      	ldr	r3, [r4, #0]
 8001016:	f043 0308 	orr.w	r3, r3, #8
 800101a:	6023      	str	r3, [r4, #0]
 800101c:	6823      	ldr	r3, [r4, #0]
 800101e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001022:	4303      	orrs	r3, r0
 8001024:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001026:	6863      	ldr	r3, [r4, #4]
 8001028:	69ea      	ldr	r2, [r5, #28]
 800102a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800102e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001032:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001034:	f7ff ff0c 	bl	8000e50 <RCC_SetFlashLatencyFromMSIRange>
 8001038:	2800      	cmp	r0, #0
 800103a:	d0d7      	beq.n	8000fec <HAL_RCC_OscConfig+0x78>
 800103c:	e79e      	b.n	8000f7c <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800103e:	69ab      	ldr	r3, [r5, #24]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d03a      	beq.n	80010ba <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_MSI_ENABLE();
 8001044:	6823      	ldr	r3, [r4, #0]
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800104c:	f7ff f906 	bl	800025c <HAL_GetTick>
 8001050:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001052:	6823      	ldr	r3, [r4, #0]
 8001054:	079b      	lsls	r3, r3, #30
 8001056:	d528      	bpl.n	80010aa <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001058:	6823      	ldr	r3, [r4, #0]
 800105a:	f043 0308 	orr.w	r3, r3, #8
 800105e:	6023      	str	r3, [r4, #0]
 8001060:	6823      	ldr	r3, [r4, #0]
 8001062:	6a2a      	ldr	r2, [r5, #32]
 8001064:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001068:	4313      	orrs	r3, r2
 800106a:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800106c:	6863      	ldr	r3, [r4, #4]
 800106e:	69ea      	ldr	r2, [r5, #28]
 8001070:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001074:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001078:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800107a:	682b      	ldr	r3, [r5, #0]
 800107c:	07d9      	lsls	r1, r3, #31
 800107e:	d42d      	bmi.n	80010dc <HAL_RCC_OscConfig+0x168>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001080:	682b      	ldr	r3, [r5, #0]
 8001082:	079a      	lsls	r2, r3, #30
 8001084:	d46b      	bmi.n	800115e <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001086:	682b      	ldr	r3, [r5, #0]
 8001088:	0719      	lsls	r1, r3, #28
 800108a:	f100 80a0 	bmi.w	80011ce <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800108e:	682b      	ldr	r3, [r5, #0]
 8001090:	075a      	lsls	r2, r3, #29
 8001092:	f100 80cd 	bmi.w	8001230 <HAL_RCC_OscConfig+0x2bc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001096:	682b      	ldr	r3, [r5, #0]
 8001098:	069a      	lsls	r2, r3, #26
 800109a:	f100 8136 	bmi.w	800130a <HAL_RCC_OscConfig+0x396>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800109e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	f040 815c 	bne.w	800135e <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 80010a6:	2000      	movs	r0, #0
 80010a8:	e7b1      	b.n	800100e <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010aa:	f7ff f8d7 	bl	800025c <HAL_GetTick>
 80010ae:	eba0 0008 	sub.w	r0, r0, r8
 80010b2:	2802      	cmp	r0, #2
 80010b4:	d9cd      	bls.n	8001052 <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
 80010b6:	2003      	movs	r0, #3
 80010b8:	e7a9      	b.n	800100e <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_MSI_DISABLE();
 80010ba:	6823      	ldr	r3, [r4, #0]
 80010bc:	f023 0301 	bic.w	r3, r3, #1
 80010c0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80010c2:	f7ff f8cb 	bl	800025c <HAL_GetTick>
 80010c6:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010c8:	6823      	ldr	r3, [r4, #0]
 80010ca:	0798      	lsls	r0, r3, #30
 80010cc:	d5d5      	bpl.n	800107a <HAL_RCC_OscConfig+0x106>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010ce:	f7ff f8c5 	bl	800025c <HAL_GetTick>
 80010d2:	eba0 0008 	sub.w	r0, r0, r8
 80010d6:	2802      	cmp	r0, #2
 80010d8:	d9f6      	bls.n	80010c8 <HAL_RCC_OscConfig+0x154>
 80010da:	e7ec      	b.n	80010b6 <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80010dc:	2e08      	cmp	r6, #8
 80010de:	d003      	beq.n	80010e8 <HAL_RCC_OscConfig+0x174>
 80010e0:	2e0c      	cmp	r6, #12
 80010e2:	d108      	bne.n	80010f6 <HAL_RCC_OscConfig+0x182>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 80010e4:	2f03      	cmp	r7, #3
 80010e6:	d106      	bne.n	80010f6 <HAL_RCC_OscConfig+0x182>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e8:	6823      	ldr	r3, [r4, #0]
 80010ea:	039b      	lsls	r3, r3, #14
 80010ec:	d5c8      	bpl.n	8001080 <HAL_RCC_OscConfig+0x10c>
 80010ee:	686b      	ldr	r3, [r5, #4]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1c5      	bne.n	8001080 <HAL_RCC_OscConfig+0x10c>
 80010f4:	e742      	b.n	8000f7c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010f6:	686b      	ldr	r3, [r5, #4]
 80010f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010fc:	d110      	bne.n	8001120 <HAL_RCC_OscConfig+0x1ac>
 80010fe:	6823      	ldr	r3, [r4, #0]
 8001100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001104:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001106:	f7ff f8a9 	bl	800025c <HAL_GetTick>
 800110a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800110c:	6823      	ldr	r3, [r4, #0]
 800110e:	0398      	lsls	r0, r3, #14
 8001110:	d4b6      	bmi.n	8001080 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001112:	f7ff f8a3 	bl	800025c <HAL_GetTick>
 8001116:	eba0 0008 	sub.w	r0, r0, r8
 800111a:	2864      	cmp	r0, #100	; 0x64
 800111c:	d9f6      	bls.n	800110c <HAL_RCC_OscConfig+0x198>
 800111e:	e7ca      	b.n	80010b6 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001120:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001124:	d104      	bne.n	8001130 <HAL_RCC_OscConfig+0x1bc>
 8001126:	6823      	ldr	r3, [r4, #0]
 8001128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800112c:	6023      	str	r3, [r4, #0]
 800112e:	e7e6      	b.n	80010fe <HAL_RCC_OscConfig+0x18a>
 8001130:	6822      	ldr	r2, [r4, #0]
 8001132:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001136:	6022      	str	r2, [r4, #0]
 8001138:	6822      	ldr	r2, [r4, #0]
 800113a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800113e:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1e0      	bne.n	8001106 <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8001144:	f7ff f88a 	bl	800025c <HAL_GetTick>
 8001148:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800114a:	6823      	ldr	r3, [r4, #0]
 800114c:	0399      	lsls	r1, r3, #14
 800114e:	d597      	bpl.n	8001080 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001150:	f7ff f884 	bl	800025c <HAL_GetTick>
 8001154:	eba0 0008 	sub.w	r0, r0, r8
 8001158:	2864      	cmp	r0, #100	; 0x64
 800115a:	d9f6      	bls.n	800114a <HAL_RCC_OscConfig+0x1d6>
 800115c:	e7ab      	b.n	80010b6 <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800115e:	2e04      	cmp	r6, #4
 8001160:	d003      	beq.n	800116a <HAL_RCC_OscConfig+0x1f6>
 8001162:	2e0c      	cmp	r6, #12
 8001164:	d110      	bne.n	8001188 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8001166:	2f02      	cmp	r7, #2
 8001168:	d10e      	bne.n	8001188 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800116a:	6823      	ldr	r3, [r4, #0]
 800116c:	055a      	lsls	r2, r3, #21
 800116e:	d503      	bpl.n	8001178 <HAL_RCC_OscConfig+0x204>
 8001170:	68eb      	ldr	r3, [r5, #12]
 8001172:	2b00      	cmp	r3, #0
 8001174:	f43f af02 	beq.w	8000f7c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001178:	6863      	ldr	r3, [r4, #4]
 800117a:	692a      	ldr	r2, [r5, #16]
 800117c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001180:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001184:	6063      	str	r3, [r4, #4]
 8001186:	e77e      	b.n	8001086 <HAL_RCC_OscConfig+0x112>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001188:	68eb      	ldr	r3, [r5, #12]
 800118a:	b17b      	cbz	r3, 80011ac <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 800118c:	6823      	ldr	r3, [r4, #0]
 800118e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001192:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001194:	f7ff f862 	bl	800025c <HAL_GetTick>
 8001198:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800119a:	6823      	ldr	r3, [r4, #0]
 800119c:	055b      	lsls	r3, r3, #21
 800119e:	d4eb      	bmi.n	8001178 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011a0:	f7ff f85c 	bl	800025c <HAL_GetTick>
 80011a4:	1bc0      	subs	r0, r0, r7
 80011a6:	2802      	cmp	r0, #2
 80011a8:	d9f7      	bls.n	800119a <HAL_RCC_OscConfig+0x226>
 80011aa:	e784      	b.n	80010b6 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_DISABLE();
 80011ac:	6823      	ldr	r3, [r4, #0]
 80011ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011b2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80011b4:	f7ff f852 	bl	800025c <HAL_GetTick>
 80011b8:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011ba:	6823      	ldr	r3, [r4, #0]
 80011bc:	0558      	lsls	r0, r3, #21
 80011be:	f57f af62 	bpl.w	8001086 <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011c2:	f7ff f84b 	bl	800025c <HAL_GetTick>
 80011c6:	1bc0      	subs	r0, r0, r7
 80011c8:	2802      	cmp	r0, #2
 80011ca:	d9f6      	bls.n	80011ba <HAL_RCC_OscConfig+0x246>
 80011cc:	e773      	b.n	80010b6 <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011ce:	696b      	ldr	r3, [r5, #20]
 80011d0:	b19b      	cbz	r3, 80011fa <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 80011d2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80011de:	f7ff f83d 	bl	800025c <HAL_GetTick>
 80011e2:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011e4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80011e8:	079b      	lsls	r3, r3, #30
 80011ea:	f53f af50 	bmi.w	800108e <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011ee:	f7ff f835 	bl	800025c <HAL_GetTick>
 80011f2:	1bc0      	subs	r0, r0, r7
 80011f4:	2802      	cmp	r0, #2
 80011f6:	d9f5      	bls.n	80011e4 <HAL_RCC_OscConfig+0x270>
 80011f8:	e75d      	b.n	80010b6 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_LSI_DISABLE();
 80011fa:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80011fe:	f023 0301 	bic.w	r3, r3, #1
 8001202:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001206:	f7ff f829 	bl	800025c <HAL_GetTick>
 800120a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800120c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001210:	0798      	lsls	r0, r3, #30
 8001212:	f57f af3c 	bpl.w	800108e <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001216:	f7ff f821 	bl	800025c <HAL_GetTick>
 800121a:	1bc0      	subs	r0, r0, r7
 800121c:	2802      	cmp	r0, #2
 800121e:	d9f5      	bls.n	800120c <HAL_RCC_OscConfig+0x298>
 8001220:	e749      	b.n	80010b6 <HAL_RCC_OscConfig+0x142>
 8001222:	bf00      	nop
 8001224:	40021000 	.word	0x40021000
 8001228:	080024bc 	.word	0x080024bc
 800122c:	20000000 	.word	0x20000000
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001230:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001232:	00d9      	lsls	r1, r3, #3
 8001234:	d429      	bmi.n	800128a <HAL_RCC_OscConfig+0x316>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001236:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800123c:	65a3      	str	r3, [r4, #88]	; 0x58
 800123e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001244:	9301      	str	r3, [sp, #4]
 8001246:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001248:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800124c:	4f71      	ldr	r7, [pc, #452]	; (8001414 <HAL_RCC_OscConfig+0x4a0>)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	05da      	lsls	r2, r3, #23
 8001252:	d51d      	bpl.n	8001290 <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001254:	68ab      	ldr	r3, [r5, #8]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d12b      	bne.n	80012b2 <HAL_RCC_OscConfig+0x33e>
 800125a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001266:	f7fe fff9 	bl	800025c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800126a:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800126e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001270:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001274:	0798      	lsls	r0, r3, #30
 8001276:	d542      	bpl.n	80012fe <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 8001278:	f1b8 0f00 	cmp.w	r8, #0
 800127c:	f43f af0b 	beq.w	8001096 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001280:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001282:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001286:	65a3      	str	r3, [r4, #88]	; 0x58
 8001288:	e705      	b.n	8001096 <HAL_RCC_OscConfig+0x122>
    FlagStatus       pwrclkchanged = RESET;
 800128a:	f04f 0800 	mov.w	r8, #0
 800128e:	e7dd      	b.n	800124c <HAL_RCC_OscConfig+0x2d8>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001296:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001298:	f7fe ffe0 	bl	800025c <HAL_GetTick>
 800129c:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	05db      	lsls	r3, r3, #23
 80012a2:	d4d7      	bmi.n	8001254 <HAL_RCC_OscConfig+0x2e0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012a4:	f7fe ffda 	bl	800025c <HAL_GetTick>
 80012a8:	eba0 0009 	sub.w	r0, r0, r9
 80012ac:	2802      	cmp	r0, #2
 80012ae:	d9f6      	bls.n	800129e <HAL_RCC_OscConfig+0x32a>
 80012b0:	e701      	b.n	80010b6 <HAL_RCC_OscConfig+0x142>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012b2:	2b05      	cmp	r3, #5
 80012b4:	d106      	bne.n	80012c4 <HAL_RCC_OscConfig+0x350>
 80012b6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80012ba:	f043 0304 	orr.w	r3, r3, #4
 80012be:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80012c2:	e7ca      	b.n	800125a <HAL_RCC_OscConfig+0x2e6>
 80012c4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80012c8:	f022 0201 	bic.w	r2, r2, #1
 80012cc:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80012d0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80012d4:	f022 0204 	bic.w	r2, r2, #4
 80012d8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1c2      	bne.n	8001266 <HAL_RCC_OscConfig+0x2f2>
      tickstart = HAL_GetTick();
 80012e0:	f7fe ffbc 	bl	800025c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012e4:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80012e8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012ea:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80012ee:	0799      	lsls	r1, r3, #30
 80012f0:	d5c2      	bpl.n	8001278 <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012f2:	f7fe ffb3 	bl	800025c <HAL_GetTick>
 80012f6:	1bc0      	subs	r0, r0, r7
 80012f8:	4548      	cmp	r0, r9
 80012fa:	d9f6      	bls.n	80012ea <HAL_RCC_OscConfig+0x376>
 80012fc:	e6db      	b.n	80010b6 <HAL_RCC_OscConfig+0x142>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012fe:	f7fe ffad 	bl	800025c <HAL_GetTick>
 8001302:	1bc0      	subs	r0, r0, r7
 8001304:	4548      	cmp	r0, r9
 8001306:	d9b3      	bls.n	8001270 <HAL_RCC_OscConfig+0x2fc>
 8001308:	e6d5      	b.n	80010b6 <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800130a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800130c:	b19b      	cbz	r3, 8001336 <HAL_RCC_OscConfig+0x3c2>
      __HAL_RCC_HSI48_ENABLE();
 800130e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 800131a:	f7fe ff9f 	bl	800025c <HAL_GetTick>
 800131e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001320:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001324:	079b      	lsls	r3, r3, #30
 8001326:	f53f aeba 	bmi.w	800109e <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800132a:	f7fe ff97 	bl	800025c <HAL_GetTick>
 800132e:	1bc0      	subs	r0, r0, r7
 8001330:	2802      	cmp	r0, #2
 8001332:	d9f5      	bls.n	8001320 <HAL_RCC_OscConfig+0x3ac>
 8001334:	e6bf      	b.n	80010b6 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSI48_DISABLE();
 8001336:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800133a:	f023 0301 	bic.w	r3, r3, #1
 800133e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001342:	f7fe ff8b 	bl	800025c <HAL_GetTick>
 8001346:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001348:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800134c:	0798      	lsls	r0, r3, #30
 800134e:	f57f aea6 	bpl.w	800109e <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001352:	f7fe ff83 	bl	800025c <HAL_GetTick>
 8001356:	1bc0      	subs	r0, r0, r7
 8001358:	2802      	cmp	r0, #2
 800135a:	d9f5      	bls.n	8001348 <HAL_RCC_OscConfig+0x3d4>
 800135c:	e6ab      	b.n	80010b6 <HAL_RCC_OscConfig+0x142>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800135e:	2e0c      	cmp	r6, #12
 8001360:	f43f ae0c 	beq.w	8000f7c <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001364:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8001366:	6823      	ldr	r3, [r4, #0]
 8001368:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800136c:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800136e:	d136      	bne.n	80013de <HAL_RCC_OscConfig+0x46a>
        tickstart = HAL_GetTick();
 8001370:	f7fe ff74 	bl	800025c <HAL_GetTick>
 8001374:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001376:	6823      	ldr	r3, [r4, #0]
 8001378:	0199      	lsls	r1, r3, #6
 800137a:	d42a      	bmi.n	80013d2 <HAL_RCC_OscConfig+0x45e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800137c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800137e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001380:	06db      	lsls	r3, r3, #27
 8001382:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001386:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001388:	4313      	orrs	r3, r2
 800138a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800138c:	3a01      	subs	r2, #1
 800138e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001392:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001394:	0852      	lsrs	r2, r2, #1
 8001396:	3a01      	subs	r2, #1
 8001398:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800139c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800139e:	0852      	lsrs	r2, r2, #1
 80013a0:	3a01      	subs	r2, #1
 80013a2:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80013a6:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80013a8:	6823      	ldr	r3, [r4, #0]
 80013aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013ae:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013b0:	68e3      	ldr	r3, [r4, #12]
 80013b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013b6:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80013b8:	f7fe ff50 	bl	800025c <HAL_GetTick>
 80013bc:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013be:	6823      	ldr	r3, [r4, #0]
 80013c0:	019a      	lsls	r2, r3, #6
 80013c2:	f53f ae70 	bmi.w	80010a6 <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c6:	f7fe ff49 	bl	800025c <HAL_GetTick>
 80013ca:	1b40      	subs	r0, r0, r5
 80013cc:	2802      	cmp	r0, #2
 80013ce:	d9f6      	bls.n	80013be <HAL_RCC_OscConfig+0x44a>
 80013d0:	e671      	b.n	80010b6 <HAL_RCC_OscConfig+0x142>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013d2:	f7fe ff43 	bl	800025c <HAL_GetTick>
 80013d6:	1b80      	subs	r0, r0, r6
 80013d8:	2802      	cmp	r0, #2
 80013da:	d9cc      	bls.n	8001376 <HAL_RCC_OscConfig+0x402>
 80013dc:	e66b      	b.n	80010b6 <HAL_RCC_OscConfig+0x142>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80013de:	6823      	ldr	r3, [r4, #0]
 80013e0:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80013e4:	bf02      	ittt	eq
 80013e6:	68e3      	ldreq	r3, [r4, #12]
 80013e8:	f023 0303 	biceq.w	r3, r3, #3
 80013ec:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80013ee:	68e3      	ldr	r3, [r4, #12]
 80013f0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80013f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013f8:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80013fa:	f7fe ff2f 	bl	800025c <HAL_GetTick>
 80013fe:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001400:	6823      	ldr	r3, [r4, #0]
 8001402:	019b      	lsls	r3, r3, #6
 8001404:	f57f ae4f 	bpl.w	80010a6 <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001408:	f7fe ff28 	bl	800025c <HAL_GetTick>
 800140c:	1b40      	subs	r0, r0, r5
 800140e:	2802      	cmp	r0, #2
 8001410:	d9f6      	bls.n	8001400 <HAL_RCC_OscConfig+0x48c>
 8001412:	e650      	b.n	80010b6 <HAL_RCC_OscConfig+0x142>
 8001414:	40007000 	.word	0x40007000

08001418 <HAL_RCC_ClockConfig>:
{
 8001418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800141c:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 800141e:	4605      	mov	r5, r0
 8001420:	b910      	cbnz	r0, 8001428 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001422:	2001      	movs	r0, #1
 8001424:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001428:	4a74      	ldr	r2, [pc, #464]	; (80015fc <HAL_RCC_ClockConfig+0x1e4>)
 800142a:	6813      	ldr	r3, [r2, #0]
 800142c:	f003 030f 	and.w	r3, r3, #15
 8001430:	428b      	cmp	r3, r1
 8001432:	d334      	bcc.n	800149e <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001434:	6829      	ldr	r1, [r5, #0]
 8001436:	f011 0701 	ands.w	r7, r1, #1
 800143a:	d13b      	bne.n	80014b4 <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800143c:	682a      	ldr	r2, [r5, #0]
 800143e:	0791      	lsls	r1, r2, #30
 8001440:	f140 80c0 	bpl.w	80015c4 <HAL_RCC_ClockConfig+0x1ac>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001444:	496e      	ldr	r1, [pc, #440]	; (8001600 <HAL_RCC_ClockConfig+0x1e8>)
 8001446:	68a8      	ldr	r0, [r5, #8]
 8001448:	688b      	ldr	r3, [r1, #8]
 800144a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800144e:	4303      	orrs	r3, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001450:	608b      	str	r3, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001452:	496a      	ldr	r1, [pc, #424]	; (80015fc <HAL_RCC_ClockConfig+0x1e4>)
 8001454:	680b      	ldr	r3, [r1, #0]
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	429e      	cmp	r6, r3
 800145c:	f0c0 80ba 	bcc.w	80015d4 <HAL_RCC_ClockConfig+0x1bc>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001460:	f012 0f04 	tst.w	r2, #4
 8001464:	4c66      	ldr	r4, [pc, #408]	; (8001600 <HAL_RCC_ClockConfig+0x1e8>)
 8001466:	f040 80c1 	bne.w	80015ec <HAL_RCC_ClockConfig+0x1d4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800146a:	0713      	lsls	r3, r2, #28
 800146c:	d506      	bpl.n	800147c <HAL_RCC_ClockConfig+0x64>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800146e:	68a3      	ldr	r3, [r4, #8]
 8001470:	692a      	ldr	r2, [r5, #16]
 8001472:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001476:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800147a:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800147c:	f7ff fd26 	bl	8000ecc <HAL_RCC_GetSysClockFreq>
 8001480:	68a3      	ldr	r3, [r4, #8]
 8001482:	4a60      	ldr	r2, [pc, #384]	; (8001604 <HAL_RCC_ClockConfig+0x1ec>)
 8001484:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001488:	5cd3      	ldrb	r3, [r2, r3]
 800148a:	f003 031f 	and.w	r3, r3, #31
 800148e:	40d8      	lsrs	r0, r3
 8001490:	4b5d      	ldr	r3, [pc, #372]	; (8001608 <HAL_RCC_ClockConfig+0x1f0>)
 8001492:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8001494:	2000      	movs	r0, #0
}
 8001496:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  status = HAL_InitTick (TICK_INT_PRIORITY);
 800149a:	f7fe beaf 	b.w	80001fc <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800149e:	6813      	ldr	r3, [r2, #0]
 80014a0:	f023 030f 	bic.w	r3, r3, #15
 80014a4:	430b      	orrs	r3, r1
 80014a6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014a8:	6813      	ldr	r3, [r2, #0]
 80014aa:	f003 030f 	and.w	r3, r3, #15
 80014ae:	4299      	cmp	r1, r3
 80014b0:	d1b7      	bne.n	8001422 <HAL_RCC_ClockConfig+0xa>
 80014b2:	e7bf      	b.n	8001434 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014b4:	686b      	ldr	r3, [r5, #4]
 80014b6:	4c52      	ldr	r4, [pc, #328]	; (8001600 <HAL_RCC_ClockConfig+0x1e8>)
 80014b8:	2b03      	cmp	r3, #3
 80014ba:	d16d      	bne.n	8001598 <HAL_RCC_ClockConfig+0x180>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014bc:	6823      	ldr	r3, [r4, #0]
 80014be:	019b      	lsls	r3, r3, #6
 80014c0:	d5af      	bpl.n	8001422 <HAL_RCC_ClockConfig+0xa>
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
  uint32_t msirange = 0U;
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80014c2:	68e3      	ldr	r3, [r4, #12]
 80014c4:	f003 0303 	and.w	r3, r3, #3
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d11e      	bne.n	800150a <HAL_RCC_ClockConfig+0xf2>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80014cc:	6823      	ldr	r3, [r4, #0]
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80014ce:	4a4f      	ldr	r2, [pc, #316]	; (800160c <HAL_RCC_ClockConfig+0x1f4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80014d0:	071f      	lsls	r7, r3, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80014d2:	bf55      	itete	pl
 80014d4:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80014d8:	6823      	ldrmi	r3, [r4, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80014da:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80014de:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
    msirange = MSIRangeTable[msirange];
 80014e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80014e6:	68e7      	ldr	r7, [r4, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80014e8:	68e3      	ldr	r3, [r4, #12]
 80014ea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80014ee:	1c58      	adds	r0, r3, #1
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80014f0:	f007 0303 	and.w	r3, r7, #3

  switch (pllsource)
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d00a      	beq.n	800150e <HAL_RCC_ClockConfig+0xf6>
 80014f8:	2b03      	cmp	r3, #3
 80014fa:	d036      	beq.n	800156a <HAL_RCC_ClockConfig+0x152>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80014fc:	fbb2 f3f0 	udiv	r3, r2, r0
 8001500:	68e7      	ldr	r7, [r4, #12]
 8001502:	f3c7 2706 	ubfx	r7, r7, #8, #7
 8001506:	437b      	muls	r3, r7
 8001508:	e008      	b.n	800151c <HAL_RCC_ClockConfig+0x104>
  uint32_t msirange = 0U;
 800150a:	2200      	movs	r2, #0
 800150c:	e7eb      	b.n	80014e6 <HAL_RCC_ClockConfig+0xce>
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800150e:	68e2      	ldr	r2, [r4, #12]
 8001510:	4b3f      	ldr	r3, [pc, #252]	; (8001610 <HAL_RCC_ClockConfig+0x1f8>)
 8001512:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001516:	fbb3 f3f0 	udiv	r3, r3, r0
 800151a:	4353      	muls	r3, r2
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800151c:	68e2      	ldr	r2, [r4, #12]
 800151e:	f3c2 6241 	ubfx	r2, r2, #25, #2
 8001522:	3201      	adds	r2, #1
 8001524:	0052      	lsls	r2, r2, #1
  sysclockfreq = pllvco/pllr;
 8001526:	fbb3 f3f2 	udiv	r3, r3, r2
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800152a:	4a3a      	ldr	r2, [pc, #232]	; (8001614 <HAL_RCC_ClockConfig+0x1fc>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d821      	bhi.n	8001574 <HAL_RCC_ClockConfig+0x15c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001530:	2700      	movs	r7, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001532:	68a3      	ldr	r3, [r4, #8]
 8001534:	686a      	ldr	r2, [r5, #4]
 8001536:	f023 0303 	bic.w	r3, r3, #3
 800153a:	4313      	orrs	r3, r2
 800153c:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800153e:	f7fe fe8d 	bl	800025c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001542:	f241 3988 	movw	r9, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001546:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001548:	68a3      	ldr	r3, [r4, #8]
 800154a:	686a      	ldr	r2, [r5, #4]
 800154c:	f003 030c 	and.w	r3, r3, #12
 8001550:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001554:	f43f af72 	beq.w	800143c <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001558:	f7fe fe80 	bl	800025c <HAL_GetTick>
 800155c:	eba0 0008 	sub.w	r0, r0, r8
 8001560:	4548      	cmp	r0, r9
 8001562:	d9f1      	bls.n	8001548 <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 8001564:	2003      	movs	r0, #3
}
 8001566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800156a:	68e2      	ldr	r2, [r4, #12]
 800156c:	4b2a      	ldr	r3, [pc, #168]	; (8001618 <HAL_RCC_ClockConfig+0x200>)
 800156e:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8001572:	e7d0      	b.n	8001516 <HAL_RCC_ClockConfig+0xfe>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001574:	68a3      	ldr	r3, [r4, #8]
 8001576:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800157a:	d107      	bne.n	800158c <HAL_RCC_ClockConfig+0x174>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800157c:	68a3      	ldr	r3, [r4, #8]
 800157e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001586:	60a3      	str	r3, [r4, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001588:	2780      	movs	r7, #128	; 0x80
 800158a:	e7d2      	b.n	8001532 <HAL_RCC_ClockConfig+0x11a>
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 800158c:	0788      	lsls	r0, r1, #30
 800158e:	d5cf      	bpl.n	8001530 <HAL_RCC_ClockConfig+0x118>
 8001590:	68ab      	ldr	r3, [r5, #8]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1cc      	bne.n	8001530 <HAL_RCC_ClockConfig+0x118>
 8001596:	e7f1      	b.n	800157c <HAL_RCC_ClockConfig+0x164>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001598:	2b02      	cmp	r3, #2
 800159a:	d10a      	bne.n	80015b2 <HAL_RCC_ClockConfig+0x19a>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800159c:	6823      	ldr	r3, [r4, #0]
 800159e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015a2:	f43f af3e 	beq.w	8001422 <HAL_RCC_ClockConfig+0xa>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80015a6:	f7ff fc91 	bl	8000ecc <HAL_RCC_GetSysClockFreq>
 80015aa:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <HAL_RCC_ClockConfig+0x1fc>)
 80015ac:	4298      	cmp	r0, r3
 80015ae:	d9bf      	bls.n	8001530 <HAL_RCC_ClockConfig+0x118>
 80015b0:	e7e4      	b.n	800157c <HAL_RCC_ClockConfig+0x164>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80015b2:	b91b      	cbnz	r3, 80015bc <HAL_RCC_ClockConfig+0x1a4>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015b4:	6823      	ldr	r3, [r4, #0]
 80015b6:	f013 0f02 	tst.w	r3, #2
 80015ba:	e7f2      	b.n	80015a2 <HAL_RCC_ClockConfig+0x18a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015bc:	6823      	ldr	r3, [r4, #0]
 80015be:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80015c2:	e7ee      	b.n	80015a2 <HAL_RCC_ClockConfig+0x18a>
    if(hpre == RCC_SYSCLK_DIV2)
 80015c4:	2f80      	cmp	r7, #128	; 0x80
 80015c6:	f47f af44 	bne.w	8001452 <HAL_RCC_ClockConfig+0x3a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80015ca:	490d      	ldr	r1, [pc, #52]	; (8001600 <HAL_RCC_ClockConfig+0x1e8>)
 80015cc:	688b      	ldr	r3, [r1, #8]
 80015ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015d2:	e73d      	b.n	8001450 <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d4:	680b      	ldr	r3, [r1, #0]
 80015d6:	f023 030f 	bic.w	r3, r3, #15
 80015da:	4333      	orrs	r3, r6
 80015dc:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015de:	680b      	ldr	r3, [r1, #0]
 80015e0:	f003 030f 	and.w	r3, r3, #15
 80015e4:	429e      	cmp	r6, r3
 80015e6:	f47f af1c 	bne.w	8001422 <HAL_RCC_ClockConfig+0xa>
 80015ea:	e739      	b.n	8001460 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015ec:	68a3      	ldr	r3, [r4, #8]
 80015ee:	68e9      	ldr	r1, [r5, #12]
 80015f0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80015f4:	430b      	orrs	r3, r1
 80015f6:	60a3      	str	r3, [r4, #8]
 80015f8:	e737      	b.n	800146a <HAL_RCC_ClockConfig+0x52>
 80015fa:	bf00      	nop
 80015fc:	40022000 	.word	0x40022000
 8001600:	40021000 	.word	0x40021000
 8001604:	080024bc 	.word	0x080024bc
 8001608:	20000000 	.word	0x20000000
 800160c:	080024cc 	.word	0x080024cc
 8001610:	00f42400 	.word	0x00f42400
 8001614:	04c4b400 	.word	0x04c4b400
 8001618:	007a1200 	.word	0x007a1200

0800161c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800161c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800161e:	4b3f      	ldr	r3, [pc, #252]	; (800171c <RCCEx_PLLSAI1_Config+0x100>)
 8001620:	68da      	ldr	r2, [r3, #12]
 8001622:	f012 0f03 	tst.w	r2, #3
{
 8001626:	4605      	mov	r5, r0
 8001628:	460e      	mov	r6, r1
 800162a:	461c      	mov	r4, r3
 800162c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800162e:	d022      	beq.n	8001676 <RCCEx_PLLSAI1_Config+0x5a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	f003 0303 	and.w	r3, r3, #3
 8001636:	4283      	cmp	r3, r0
 8001638:	d130      	bne.n	800169c <RCCEx_PLLSAI1_Config+0x80>
       ||
 800163a:	b37b      	cbz	r3, 800169c <RCCEx_PLLSAI1_Config+0x80>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800163c:	6823      	ldr	r3, [r4, #0]
 800163e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001642:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001644:	f7fe fe0a 	bl	800025c <HAL_GetTick>
 8001648:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800164a:	6823      	ldr	r3, [r4, #0]
 800164c:	011a      	lsls	r2, r3, #4
 800164e:	d42e      	bmi.n	80016ae <RCCEx_PLLSAI1_Config+0x92>
 8001650:	68af      	ldr	r7, [r5, #8]
 8001652:	686b      	ldr	r3, [r5, #4]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001654:	b396      	cbz	r6, 80016bc <RCCEx_PLLSAI1_Config+0xa0>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001656:	2e01      	cmp	r6, #1
 8001658:	d14c      	bne.n	80016f4 <RCCEx_PLLSAI1_Config+0xd8>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800165a:	6922      	ldr	r2, [r4, #16]
 800165c:	4930      	ldr	r1, [pc, #192]	; (8001720 <RCCEx_PLLSAI1_Config+0x104>)
 800165e:	4011      	ands	r1, r2
 8001660:	692a      	ldr	r2, [r5, #16]
 8001662:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8001666:	3b01      	subs	r3, #1
 8001668:	0852      	lsrs	r2, r2, #1
 800166a:	ea41 1303 	orr.w	r3, r1, r3, lsl #4
 800166e:	3a01      	subs	r2, #1
 8001670:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001674:	e02d      	b.n	80016d2 <RCCEx_PLLSAI1_Config+0xb6>
    switch(PllSai1->PLLSAI1Source)
 8001676:	2802      	cmp	r0, #2
 8001678:	d00c      	beq.n	8001694 <RCCEx_PLLSAI1_Config+0x78>
 800167a:	2803      	cmp	r0, #3
 800167c:	d010      	beq.n	80016a0 <RCCEx_PLLSAI1_Config+0x84>
 800167e:	2801      	cmp	r0, #1
 8001680:	d10c      	bne.n	800169c <RCCEx_PLLSAI1_Config+0x80>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	079f      	lsls	r7, r3, #30
 8001686:	d534      	bpl.n	80016f2 <RCCEx_PLLSAI1_Config+0xd6>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8001688:	68e3      	ldr	r3, [r4, #12]
 800168a:	f023 0303 	bic.w	r3, r3, #3
 800168e:	4318      	orrs	r0, r3
 8001690:	60e0      	str	r0, [r4, #12]
 8001692:	e7d3      	b.n	800163c <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800169a:	d1f5      	bne.n	8001688 <RCCEx_PLLSAI1_Config+0x6c>
 800169c:	2001      	movs	r0, #1
 800169e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	0391      	lsls	r1, r2, #14
 80016a4:	d4f0      	bmi.n	8001688 <RCCEx_PLLSAI1_Config+0x6c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80016ac:	e7f5      	b.n	800169a <RCCEx_PLLSAI1_Config+0x7e>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80016ae:	f7fe fdd5 	bl	800025c <HAL_GetTick>
 80016b2:	1bc0      	subs	r0, r0, r7
 80016b4:	2802      	cmp	r0, #2
 80016b6:	d9c8      	bls.n	800164a <RCCEx_PLLSAI1_Config+0x2e>
        status = HAL_TIMEOUT;
 80016b8:	2003      	movs	r0, #3
 80016ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80016bc:	68e8      	ldr	r0, [r5, #12]
 80016be:	6926      	ldr	r6, [r4, #16]
 80016c0:	4918      	ldr	r1, [pc, #96]	; (8001724 <RCCEx_PLLSAI1_Config+0x108>)
 80016c2:	06c2      	lsls	r2, r0, #27
 80016c4:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80016c8:	4031      	ands	r1, r6
 80016ca:	430a      	orrs	r2, r1
 80016cc:	3b01      	subs	r3, #1
 80016ce:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80016d2:	6123      	str	r3, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80016d4:	6823      	ldr	r3, [r4, #0]
 80016d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016da:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016dc:	f7fe fdbe 	bl	800025c <HAL_GetTick>
 80016e0:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80016e2:	6823      	ldr	r3, [r4, #0]
 80016e4:	011b      	lsls	r3, r3, #4
 80016e6:	d513      	bpl.n	8001710 <RCCEx_PLLSAI1_Config+0xf4>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80016e8:	6923      	ldr	r3, [r4, #16]
 80016ea:	69aa      	ldr	r2, [r5, #24]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	6123      	str	r3, [r4, #16]
 80016f0:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80016f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80016f4:	6921      	ldr	r1, [r4, #16]
 80016f6:	4a0c      	ldr	r2, [pc, #48]	; (8001728 <RCCEx_PLLSAI1_Config+0x10c>)
 80016f8:	400a      	ands	r2, r1
 80016fa:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80016fe:	3b01      	subs	r3, #1
 8001700:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 8001704:	696a      	ldr	r2, [r5, #20]
 8001706:	0852      	lsrs	r2, r2, #1
 8001708:	3a01      	subs	r2, #1
 800170a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800170e:	e7e0      	b.n	80016d2 <RCCEx_PLLSAI1_Config+0xb6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001710:	f7fe fda4 	bl	800025c <HAL_GetTick>
 8001714:	1b80      	subs	r0, r0, r6
 8001716:	2802      	cmp	r0, #2
 8001718:	d9e3      	bls.n	80016e2 <RCCEx_PLLSAI1_Config+0xc6>
 800171a:	e7cd      	b.n	80016b8 <RCCEx_PLLSAI1_Config+0x9c>
 800171c:	40021000 	.word	0x40021000
 8001720:	ff9f800f 	.word	0xff9f800f
 8001724:	07ff800f 	.word	0x07ff800f
 8001728:	f9ff800f 	.word	0xf9ff800f

0800172c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800172c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800172e:	4b3f      	ldr	r3, [pc, #252]	; (800182c <RCCEx_PLLSAI2_Config+0x100>)
 8001730:	68da      	ldr	r2, [r3, #12]
 8001732:	f012 0f03 	tst.w	r2, #3
{
 8001736:	4605      	mov	r5, r0
 8001738:	460e      	mov	r6, r1
 800173a:	461c      	mov	r4, r3
 800173c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800173e:	d022      	beq.n	8001786 <RCCEx_PLLSAI2_Config+0x5a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	f003 0303 	and.w	r3, r3, #3
 8001746:	4283      	cmp	r3, r0
 8001748:	d130      	bne.n	80017ac <RCCEx_PLLSAI2_Config+0x80>
       ||
 800174a:	b37b      	cbz	r3, 80017ac <RCCEx_PLLSAI2_Config+0x80>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800174c:	6823      	ldr	r3, [r4, #0]
 800174e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001752:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001754:	f7fe fd82 	bl	800025c <HAL_GetTick>
 8001758:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800175a:	6823      	ldr	r3, [r4, #0]
 800175c:	009a      	lsls	r2, r3, #2
 800175e:	d42e      	bmi.n	80017be <RCCEx_PLLSAI2_Config+0x92>
 8001760:	68af      	ldr	r7, [r5, #8]
 8001762:	686b      	ldr	r3, [r5, #4]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001764:	b396      	cbz	r6, 80017cc <RCCEx_PLLSAI2_Config+0xa0>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8001766:	2e01      	cmp	r6, #1
 8001768:	d14c      	bne.n	8001804 <RCCEx_PLLSAI2_Config+0xd8>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800176a:	6962      	ldr	r2, [r4, #20]
 800176c:	4930      	ldr	r1, [pc, #192]	; (8001830 <RCCEx_PLLSAI2_Config+0x104>)
 800176e:	4011      	ands	r1, r2
 8001770:	692a      	ldr	r2, [r5, #16]
 8001772:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8001776:	3b01      	subs	r3, #1
 8001778:	0852      	lsrs	r2, r2, #1
 800177a:	ea41 1303 	orr.w	r3, r1, r3, lsl #4
 800177e:	3a01      	subs	r2, #1
 8001780:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001784:	e02d      	b.n	80017e2 <RCCEx_PLLSAI2_Config+0xb6>
    switch(PllSai2->PLLSAI2Source)
 8001786:	2802      	cmp	r0, #2
 8001788:	d00c      	beq.n	80017a4 <RCCEx_PLLSAI2_Config+0x78>
 800178a:	2803      	cmp	r0, #3
 800178c:	d010      	beq.n	80017b0 <RCCEx_PLLSAI2_Config+0x84>
 800178e:	2801      	cmp	r0, #1
 8001790:	d10c      	bne.n	80017ac <RCCEx_PLLSAI2_Config+0x80>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	079f      	lsls	r7, r3, #30
 8001796:	d534      	bpl.n	8001802 <RCCEx_PLLSAI2_Config+0xd6>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8001798:	68e3      	ldr	r3, [r4, #12]
 800179a:	f023 0303 	bic.w	r3, r3, #3
 800179e:	4318      	orrs	r0, r3
 80017a0:	60e0      	str	r0, [r4, #12]
 80017a2:	e7d3      	b.n	800174c <RCCEx_PLLSAI2_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80017aa:	d1f5      	bne.n	8001798 <RCCEx_PLLSAI2_Config+0x6c>
 80017ac:	2001      	movs	r0, #1
 80017ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	0391      	lsls	r1, r2, #14
 80017b4:	d4f0      	bmi.n	8001798 <RCCEx_PLLSAI2_Config+0x6c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80017bc:	e7f5      	b.n	80017aa <RCCEx_PLLSAI2_Config+0x7e>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80017be:	f7fe fd4d 	bl	800025c <HAL_GetTick>
 80017c2:	1bc0      	subs	r0, r0, r7
 80017c4:	2802      	cmp	r0, #2
 80017c6:	d9c8      	bls.n	800175a <RCCEx_PLLSAI2_Config+0x2e>
        status = HAL_TIMEOUT;
 80017c8:	2003      	movs	r0, #3
 80017ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80017cc:	68e8      	ldr	r0, [r5, #12]
 80017ce:	6966      	ldr	r6, [r4, #20]
 80017d0:	4918      	ldr	r1, [pc, #96]	; (8001834 <RCCEx_PLLSAI2_Config+0x108>)
 80017d2:	06c2      	lsls	r2, r0, #27
 80017d4:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80017d8:	4031      	ands	r1, r6
 80017da:	430a      	orrs	r2, r1
 80017dc:	3b01      	subs	r3, #1
 80017de:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80017e2:	6163      	str	r3, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80017e4:	6823      	ldr	r3, [r4, #0]
 80017e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ea:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ec:	f7fe fd36 	bl	800025c <HAL_GetTick>
 80017f0:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80017f2:	6823      	ldr	r3, [r4, #0]
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	d513      	bpl.n	8001820 <RCCEx_PLLSAI2_Config+0xf4>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80017f8:	6963      	ldr	r3, [r4, #20]
 80017fa:	69aa      	ldr	r2, [r5, #24]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	6163      	str	r3, [r4, #20]
 8001800:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001804:	6961      	ldr	r1, [r4, #20]
 8001806:	4a0c      	ldr	r2, [pc, #48]	; (8001838 <RCCEx_PLLSAI2_Config+0x10c>)
 8001808:	400a      	ands	r2, r1
 800180a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800180e:	3b01      	subs	r3, #1
 8001810:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 8001814:	696a      	ldr	r2, [r5, #20]
 8001816:	0852      	lsrs	r2, r2, #1
 8001818:	3a01      	subs	r2, #1
 800181a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800181e:	e7e0      	b.n	80017e2 <RCCEx_PLLSAI2_Config+0xb6>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001820:	f7fe fd1c 	bl	800025c <HAL_GetTick>
 8001824:	1b80      	subs	r0, r0, r6
 8001826:	2802      	cmp	r0, #2
 8001828:	d9e3      	bls.n	80017f2 <RCCEx_PLLSAI2_Config+0xc6>
 800182a:	e7cd      	b.n	80017c8 <RCCEx_PLLSAI2_Config+0x9c>
 800182c:	40021000 	.word	0x40021000
 8001830:	ff9f800f 	.word	0xff9f800f
 8001834:	07ff800f 	.word	0x07ff800f
 8001838:	f9ff800f 	.word	0xf9ff800f

0800183c <HAL_RCCEx_PeriphCLKConfig>:
{
 800183c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001840:	6805      	ldr	r5, [r0, #0]
 8001842:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 8001846:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001848:	d023      	beq.n	8001892 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->Sai1ClockSelection)
 800184a:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 800184c:	2940      	cmp	r1, #64	; 0x40
 800184e:	d014      	beq.n	800187a <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8001850:	d804      	bhi.n	800185c <HAL_RCCEx_PeriphCLKConfig+0x20>
 8001852:	b1c1      	cbz	r1, 8001886 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8001854:	2920      	cmp	r1, #32
 8001856:	d02b      	beq.n	80018b0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      ret = HAL_ERROR;
 8001858:	2501      	movs	r5, #1
 800185a:	e01a      	b.n	8001892 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->Sai1ClockSelection)
 800185c:	2960      	cmp	r1, #96	; 0x60
 800185e:	d001      	beq.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001860:	2980      	cmp	r1, #128	; 0x80
 8001862:	d1f9      	bne.n	8001858 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001864:	4a4e      	ldr	r2, [pc, #312]	; (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001866:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8001868:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 800186c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8001870:	430b      	orrs	r3, r1
 8001872:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001876:	2500      	movs	r5, #0
 8001878:	e00b      	b.n	8001892 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800187a:	4a49      	ldr	r2, [pc, #292]	; (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800187c:	68d3      	ldr	r3, [r2, #12]
 800187e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001882:	60d3      	str	r3, [r2, #12]
      break;
 8001884:	e7ee      	b.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0x28>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001886:	3004      	adds	r0, #4
 8001888:	f7ff fec8 	bl	800161c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800188c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800188e:	2800      	cmp	r0, #0
 8001890:	d0e8      	beq.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0x28>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001892:	6823      	ldr	r3, [r4, #0]
 8001894:	04db      	lsls	r3, r3, #19
 8001896:	d509      	bpl.n	80018ac <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001898:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800189a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800189e:	d014      	beq.n	80018ca <HAL_RCCEx_PeriphCLKConfig+0x8e>
 80018a0:	d80b      	bhi.n	80018ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
 80018a2:	b1c1      	cbz	r1, 80018d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 80018a4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80018a8:	d071      	beq.n	800198e <HAL_RCCEx_PeriphCLKConfig+0x152>
      ret = HAL_ERROR;
 80018aa:	2501      	movs	r5, #1
 80018ac:	462e      	mov	r6, r5
 80018ae:	e021      	b.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80018b0:	2100      	movs	r1, #0
 80018b2:	3020      	adds	r0, #32
 80018b4:	f7ff ff3a 	bl	800172c <RCCEx_PLLSAI2_Config>
 80018b8:	e7e8      	b.n	800188c <HAL_RCCEx_PeriphCLKConfig+0x50>
    switch(PeriphClkInit->Sai2ClockSelection)
 80018ba:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 80018be:	d002      	beq.n	80018c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80018c0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80018c4:	d1f1      	bne.n	80018aa <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80018c6:	462e      	mov	r6, r5
 80018c8:	e009      	b.n	80018de <HAL_RCCEx_PeriphCLKConfig+0xa2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80018ca:	4a35      	ldr	r2, [pc, #212]	; (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80018cc:	68d3      	ldr	r3, [r2, #12]
 80018ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d2:	60d3      	str	r3, [r2, #12]
 80018d4:	e7f7      	b.n	80018c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80018d6:	1d20      	adds	r0, r4, #4
 80018d8:	f7ff fea0 	bl	800161c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80018dc:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80018de:	2e00      	cmp	r6, #0
 80018e0:	d15b      	bne.n	800199a <HAL_RCCEx_PeriphCLKConfig+0x15e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80018e2:	4a2f      	ldr	r2, [pc, #188]	; (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80018e4:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80018e6:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80018ea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80018ee:	430b      	orrs	r3, r1
 80018f0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80018f4:	6823      	ldr	r3, [r4, #0]
 80018f6:	039f      	lsls	r7, r3, #14
 80018f8:	d565      	bpl.n	80019c6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80018fa:	4f29      	ldr	r7, [pc, #164]	; (80019a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80018fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018fe:	00d8      	lsls	r0, r3, #3
 8001900:	f140 81f3 	bpl.w	8001cea <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    FlagStatus       pwrclkchanged = RESET;
 8001904:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001908:	f8df 9098 	ldr.w	r9, [pc, #152]	; 80019a4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800190c:	f8d9 3000 	ldr.w	r3, [r9]
 8001910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001914:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8001918:	f7fe fca0 	bl	800025c <HAL_GetTick>
 800191c:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800191e:	f8d9 3000 	ldr.w	r3, [r9]
 8001922:	05d9      	lsls	r1, r3, #23
 8001924:	d540      	bpl.n	80019a8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if(ret == HAL_OK)
 8001926:	2e00      	cmp	r6, #0
 8001928:	f040 8197 	bne.w	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x41e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800192c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001930:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001934:	d015      	beq.n	8001962 <HAL_RCCEx_PeriphCLKConfig+0x126>
 8001936:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800193a:	4293      	cmp	r3, r2
 800193c:	d011      	beq.n	8001962 <HAL_RCCEx_PeriphCLKConfig+0x126>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800193e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8001942:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001946:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800194a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800194e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001952:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001956:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800195a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800195e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001962:	07da      	lsls	r2, r3, #31
 8001964:	d509      	bpl.n	800197a <HAL_RCCEx_PeriphCLKConfig+0x13e>
        tickstart = HAL_GetTick();
 8001966:	f7fe fc79 	bl	800025c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800196a:	f241 3a88 	movw	sl, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800196e:	4681      	mov	r9, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001970:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001974:	079b      	lsls	r3, r3, #30
 8001976:	f140 8168 	bpl.w	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800197a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800197e:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8001982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001986:	4313      	orrs	r3, r2
 8001988:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800198c:	e014      	b.n	80019b8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800198e:	2100      	movs	r1, #0
 8001990:	f104 0020 	add.w	r0, r4, #32
 8001994:	f7ff feca 	bl	800172c <RCCEx_PLLSAI2_Config>
 8001998:	e7a0      	b.n	80018dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800199a:	4635      	mov	r5, r6
 800199c:	e7aa      	b.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 800199e:	bf00      	nop
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019a8:	f7fe fc58 	bl	800025c <HAL_GetTick>
 80019ac:	eba0 000a 	sub.w	r0, r0, sl
 80019b0:	2802      	cmp	r0, #2
 80019b2:	d9b4      	bls.n	800191e <HAL_RCCEx_PeriphCLKConfig+0xe2>
        ret = HAL_TIMEOUT;
 80019b4:	2503      	movs	r5, #3
 80019b6:	462e      	mov	r6, r5
    if(pwrclkchanged == SET)
 80019b8:	f1b8 0f00 	cmp.w	r8, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80019be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019c4:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80019c6:	6823      	ldr	r3, [r4, #0]
 80019c8:	07df      	lsls	r7, r3, #31
 80019ca:	d508      	bpl.n	80019de <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80019cc:	49c0      	ldr	r1, [pc, #768]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80019ce:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80019d0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80019d4:	f022 0203 	bic.w	r2, r2, #3
 80019d8:	4302      	orrs	r2, r0
 80019da:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80019de:	0798      	lsls	r0, r3, #30
 80019e0:	d508      	bpl.n	80019f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80019e2:	49bb      	ldr	r1, [pc, #748]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80019e4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80019e6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80019ea:	f022 020c 	bic.w	r2, r2, #12
 80019ee:	4302      	orrs	r2, r0
 80019f0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80019f4:	0759      	lsls	r1, r3, #29
 80019f6:	d508      	bpl.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80019f8:	49b5      	ldr	r1, [pc, #724]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80019fa:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80019fc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001a00:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001a04:	4302      	orrs	r2, r0
 8001a06:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001a0a:	071a      	lsls	r2, r3, #28
 8001a0c:	d508      	bpl.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001a0e:	49b0      	ldr	r1, [pc, #704]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001a10:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001a12:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001a16:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001a1a:	4302      	orrs	r2, r0
 8001a1c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001a20:	06df      	lsls	r7, r3, #27
 8001a22:	d508      	bpl.n	8001a36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001a24:	49aa      	ldr	r1, [pc, #680]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001a26:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001a28:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001a2c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001a30:	4302      	orrs	r2, r0
 8001a32:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001a36:	0698      	lsls	r0, r3, #26
 8001a38:	d508      	bpl.n	8001a4c <HAL_RCCEx_PeriphCLKConfig+0x210>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001a3a:	49a5      	ldr	r1, [pc, #660]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001a3c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001a3e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001a42:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001a46:	4302      	orrs	r2, r0
 8001a48:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001a4c:	0599      	lsls	r1, r3, #22
 8001a4e:	d508      	bpl.n	8001a62 <HAL_RCCEx_PeriphCLKConfig+0x226>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001a50:	499f      	ldr	r1, [pc, #636]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001a52:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001a54:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001a58:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001a5c:	4302      	orrs	r2, r0
 8001a5e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001a62:	055a      	lsls	r2, r3, #21
 8001a64:	d508      	bpl.n	8001a78 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001a66:	499a      	ldr	r1, [pc, #616]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001a68:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001a6a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001a6e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001a72:	4302      	orrs	r2, r0
 8001a74:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a78:	065f      	lsls	r7, r3, #25
 8001a7a:	d508      	bpl.n	8001a8e <HAL_RCCEx_PeriphCLKConfig+0x252>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a7c:	4994      	ldr	r1, [pc, #592]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001a7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001a80:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001a84:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001a88:	4302      	orrs	r2, r0
 8001a8a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001a8e:	0618      	lsls	r0, r3, #24
 8001a90:	d508      	bpl.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001a92:	498f      	ldr	r1, [pc, #572]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001a94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a96:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001a9a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001a9e:	4302      	orrs	r2, r0
 8001aa0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001aa4:	05d9      	lsls	r1, r3, #23
 8001aa6:	d508      	bpl.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001aa8:	4989      	ldr	r1, [pc, #548]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001aaa:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001aac:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001ab0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001ab4:	4302      	orrs	r2, r0
 8001ab6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001aba:	02da      	lsls	r2, r3, #11
 8001abc:	d508      	bpl.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x294>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001abe:	4984      	ldr	r1, [pc, #528]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001ac0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001ac2:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8001ac6:	f022 0203 	bic.w	r2, r2, #3
 8001aca:	4302      	orrs	r2, r0
 8001acc:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001ad0:	049f      	lsls	r7, r3, #18
 8001ad2:	d510      	bpl.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ad4:	4a7e      	ldr	r2, [pc, #504]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001ad6:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8001ad8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001adc:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001ae0:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001ae2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ae6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001aea:	f040 80b8 	bne.w	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x422>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001aee:	68d3      	ldr	r3, [r2, #12]
 8001af0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001af4:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001af6:	6823      	ldr	r3, [r4, #0]
 8001af8:	0318      	lsls	r0, r3, #12
 8001afa:	d50f      	bpl.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001afc:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8001afe:	4b74      	ldr	r3, [pc, #464]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001b00:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8001b04:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001b08:	f040 80b6 	bne.w	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 8001b0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b10:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001b14:	68da      	ldr	r2, [r3, #12]
 8001b16:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001b1a:	60da      	str	r2, [r3, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001b1c:	6823      	ldr	r3, [r4, #0]
 8001b1e:	0359      	lsls	r1, r3, #13
 8001b20:	d510      	bpl.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x308>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001b22:	4a6b      	ldr	r2, [pc, #428]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001b24:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001b26:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001b2a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001b2e:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001b30:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001b34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001b38:	f040 80bd 	bne.w	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001b3c:	68d3      	ldr	r3, [r2, #12]
 8001b3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b42:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001b44:	6823      	ldr	r3, [r4, #0]
 8001b46:	045a      	lsls	r2, r3, #17
 8001b48:	d514      	bpl.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x338>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001b4a:	4961      	ldr	r1, [pc, #388]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001b4c:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8001b50:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001b54:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001b58:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001b5a:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001b62:	d107      	bne.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x338>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001b64:	2102      	movs	r1, #2
 8001b66:	1d20      	adds	r0, r4, #4
 8001b68:	f7ff fd58 	bl	800161c <RCCEx_PLLSAI1_Config>
 8001b6c:	4606      	mov	r6, r0
 8001b6e:	2800      	cmp	r0, #0
 8001b70:	bf18      	it	ne
 8001b72:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001b74:	6822      	ldr	r2, [r4, #0]
 8001b76:	03d3      	lsls	r3, r2, #15
 8001b78:	d509      	bpl.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x352>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001b7a:	4955      	ldr	r1, [pc, #340]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001b7c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8001b80:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 8001b84:	f023 0304 	bic.w	r3, r3, #4
 8001b88:	4303      	orrs	r3, r0
 8001b8a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8001b8e:	0297      	lsls	r7, r2, #10
 8001b90:	d509      	bpl.n	8001ba6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001b92:	494f      	ldr	r1, [pc, #316]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001b94:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8001b98:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 8001b9c:	f023 0318 	bic.w	r3, r3, #24
 8001ba0:	4303      	orrs	r3, r0
 8001ba2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001ba6:	0250      	lsls	r0, r2, #9
 8001ba8:	d51f      	bpl.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x3ae>
    __HAL_RCC_PLLSAI2_DISABLE();
 8001baa:	4f49      	ldr	r7, [pc, #292]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8001bb4:	f7fe fb52 	bl	800025c <HAL_GetTick>
 8001bb8:	4680      	mov	r8, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	0099      	lsls	r1, r3, #2
 8001bbe:	f100 8089 	bmi.w	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x498>
    if(ret == HAL_OK)
 8001bc2:	2e00      	cmp	r6, #0
 8001bc4:	f040 808f 	bne.w	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8001bc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001bcc:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8001bd0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001bda:	2102      	movs	r1, #2
 8001bdc:	f104 0020 	add.w	r0, r4, #32
 8001be0:	f7ff fda4 	bl	800172c <RCCEx_PLLSAI2_Config>
 8001be4:	2800      	cmp	r0, #0
 8001be6:	bf18      	it	ne
 8001be8:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8001bea:	6823      	ldr	r3, [r4, #0]
 8001bec:	021a      	lsls	r2, r3, #8
 8001bee:	d514      	bpl.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8001bf0:	4937      	ldr	r1, [pc, #220]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001bf2:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001bf6:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 8001bfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bfe:	4313      	orrs	r3, r2
    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8001c00:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8001c04:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8001c08:	d107      	bne.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x3de>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	f104 0020 	add.w	r0, r4, #32
 8001c10:	f7ff fd8c 	bl	800172c <RCCEx_PLLSAI2_Config>
 8001c14:	2800      	cmp	r0, #0
 8001c16:	bf18      	it	ne
 8001c18:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8001c1a:	6823      	ldr	r3, [r4, #0]
 8001c1c:	01db      	lsls	r3, r3, #7
 8001c1e:	d510      	bpl.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x406>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8001c20:	4a2b      	ldr	r2, [pc, #172]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8001c22:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8001c26:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8001c2a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001c2e:	430b      	orrs	r3, r1
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8001c30:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8001c34:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8001c38:	d103      	bne.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x406>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001c3a:	68d3      	ldr	r3, [r2, #12]
 8001c3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c40:	60d3      	str	r3, [r2, #12]
}
 8001c42:	4628      	mov	r0, r5
 8001c44:	b002      	add	sp, #8
 8001c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c4a:	f7fe fb07 	bl	800025c <HAL_GetTick>
 8001c4e:	eba0 0009 	sub.w	r0, r0, r9
 8001c52:	4550      	cmp	r0, sl
 8001c54:	f67f ae8c 	bls.w	8001970 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8001c58:	e6ac      	b.n	80019b4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8001c5a:	4635      	mov	r5, r6
 8001c5c:	e6ac      	b.n	80019b8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001c5e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001c62:	f47f af48 	bne.w	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001c66:	2101      	movs	r1, #1
 8001c68:	1d20      	adds	r0, r4, #4
 8001c6a:	f7ff fcd7 	bl	800161c <RCCEx_PLLSAI1_Config>
 8001c6e:	4606      	mov	r6, r0
 8001c70:	2800      	cmp	r0, #0
 8001c72:	bf18      	it	ne
 8001c74:	4605      	movne	r5, r0
 8001c76:	e73e      	b.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001c78:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c7c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8001c80:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001c84:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8001c88:	430a      	orrs	r2, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001c8a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001c8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001c92:	d103      	bne.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x460>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001c94:	68da      	ldr	r2, [r3, #12]
 8001c96:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001c9a:	e73e      	b.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001c9c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001ca0:	f47f af3c 	bne.w	8001b1c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	1d20      	adds	r0, r4, #4
 8001ca8:	f7ff fcb8 	bl	800161c <RCCEx_PLLSAI1_Config>
 8001cac:	4606      	mov	r6, r0
 8001cae:	2800      	cmp	r0, #0
 8001cb0:	bf18      	it	ne
 8001cb2:	4605      	movne	r5, r0
 8001cb4:	e732      	b.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001cb6:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001cba:	f47f af43 	bne.w	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x308>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	1d20      	adds	r0, r4, #4
 8001cc2:	f7ff fcab 	bl	800161c <RCCEx_PLLSAI1_Config>
 8001cc6:	4606      	mov	r6, r0
 8001cc8:	2800      	cmp	r0, #0
 8001cca:	bf18      	it	ne
 8001ccc:	4605      	movne	r5, r0
 8001cce:	e739      	b.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8001cd0:	40021000 	.word	0x40021000
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001cd4:	f7fe fac2 	bl	800025c <HAL_GetTick>
 8001cd8:	eba0 0008 	sub.w	r0, r0, r8
 8001cdc:	2802      	cmp	r0, #2
 8001cde:	f67f af6c 	bls.w	8001bba <HAL_RCCEx_PeriphCLKConfig+0x37e>
        ret = HAL_TIMEOUT;
 8001ce2:	2503      	movs	r5, #3
 8001ce4:	e781      	b.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8001ce6:	4635      	mov	r5, r6
 8001ce8:	e77f      	b.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	65bb      	str	r3, [r7, #88]	; 0x58
 8001cf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	9301      	str	r3, [sp, #4]
 8001cfa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001cfc:	f04f 0801 	mov.w	r8, #1
 8001d00:	e602      	b.n	8001908 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001d02:	bf00      	nop

08001d04 <HAL_RTC_WaitForSynchro>:

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001d04:	6802      	ldr	r2, [r0, #0]
{
 8001d06:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001d08:	68d3      	ldr	r3, [r2, #12]
 8001d0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001d0e:	60d3      	str	r3, [r2, #12]
{
 8001d10:	4604      	mov	r4, r0
#endif

  tickstart = HAL_GetTick();
 8001d12:	f7fe faa3 	bl	800025c <HAL_GetTick>
 8001d16:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx)
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001d18:	6823      	ldr	r3, [r4, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	069b      	lsls	r3, r3, #26
 8001d1e:	d501      	bpl.n	8001d24 <HAL_RTC_WaitForSynchro+0x20>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8001d20:	2000      	movs	r0, #0
 8001d22:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001d24:	f7fe fa9a 	bl	800025c <HAL_GetTick>
 8001d28:	1b40      	subs	r0, r0, r5
 8001d2a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001d2e:	d9f3      	bls.n	8001d18 <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8001d30:	2003      	movs	r0, #3
}
 8001d32:	bd38      	pop	{r3, r4, r5, pc}

08001d34 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001d34:	b538      	push	{r3, r4, r5, lr}
        return HAL_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001d36:	6803      	ldr	r3, [r0, #0]
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	0652      	lsls	r2, r2, #25
{
 8001d3c:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001d3e:	d501      	bpl.n	8001d44 <RTC_EnterInitMode+0x10>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  return HAL_OK;
 8001d40:	2000      	movs	r0, #0
 8001d42:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001d44:	f04f 32ff 	mov.w	r2, #4294967295
 8001d48:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8001d4a:	f7fe fa87 	bl	800025c <HAL_GetTick>
 8001d4e:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8001d50:	6823      	ldr	r3, [r4, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	065b      	lsls	r3, r3, #25
 8001d56:	d4f3      	bmi.n	8001d40 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8001d58:	f7fe fa80 	bl	800025c <HAL_GetTick>
 8001d5c:	1b40      	subs	r0, r0, r5
 8001d5e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001d62:	d9f5      	bls.n	8001d50 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8001d64:	2003      	movs	r0, #3
}
 8001d66:	bd38      	pop	{r3, r4, r5, pc}

08001d68 <HAL_RTC_Init>:
{
 8001d68:	b538      	push	{r3, r4, r5, lr}
  if(hrtc != NULL)
 8001d6a:	4604      	mov	r4, r0
 8001d6c:	b1d8      	cbz	r0, 8001da6 <HAL_RTC_Init+0x3e>
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8001d6e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001d72:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d76:	b91b      	cbnz	r3, 8001d80 <HAL_RTC_Init+0x18>
      hrtc->Lock = HAL_UNLOCKED;
 8001d78:	f880 2020 	strb.w	r2, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 8001d7c:	f000 fafe 	bl	800237c <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8001d80:	2302      	movs	r3, #2
 8001d82:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001d86:	6823      	ldr	r3, [r4, #0]
 8001d88:	22ca      	movs	r2, #202	; 0xca
 8001d8a:	625a      	str	r2, [r3, #36]	; 0x24
 8001d8c:	2253      	movs	r2, #83	; 0x53
 8001d8e:	625a      	str	r2, [r3, #36]	; 0x24
    if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001d90:	4620      	mov	r0, r4
 8001d92:	f7ff ffcf 	bl	8001d34 <RTC_EnterInitMode>
 8001d96:	6823      	ldr	r3, [r4, #0]
 8001d98:	4605      	mov	r5, r0
 8001d9a:	b138      	cbz	r0, 8001dac <HAL_RTC_Init+0x44>
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001d9c:	22ff      	movs	r2, #255	; 0xff
 8001d9e:	625a      	str	r2, [r3, #36]	; 0x24
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001da0:	2304      	movs	r3, #4
 8001da2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  HAL_StatusTypeDef status = HAL_ERROR;
 8001da6:	2501      	movs	r5, #1
}
 8001da8:	4628      	mov	r0, r5
 8001daa:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8001dac:	689a      	ldr	r2, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001dae:	6920      	ldr	r0, [r4, #16]
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8001db0:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8001db4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001db8:	609a      	str	r2, [r3, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001dba:	6862      	ldr	r2, [r4, #4]
 8001dbc:	6899      	ldr	r1, [r3, #8]
 8001dbe:	4302      	orrs	r2, r0
 8001dc0:	69a0      	ldr	r0, [r4, #24]
 8001dc2:	4302      	orrs	r2, r0
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	609a      	str	r2, [r3, #8]
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8001dc8:	68e2      	ldr	r2, [r4, #12]
 8001dca:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001dcc:	691a      	ldr	r2, [r3, #16]
 8001dce:	68a1      	ldr	r1, [r4, #8]
 8001dd0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001dd4:	611a      	str	r2, [r3, #16]
      CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ddc:	60da      	str	r2, [r3, #12]
      if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	069b      	lsls	r3, r3, #26
 8001de2:	d405      	bmi.n	8001df0 <HAL_RTC_Init+0x88>
        if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001de4:	4620      	mov	r0, r4
 8001de6:	f7ff ff8d 	bl	8001d04 <HAL_RTC_WaitForSynchro>
 8001dea:	b108      	cbz	r0, 8001df0 <HAL_RTC_Init+0x88>
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001dec:	6823      	ldr	r3, [r4, #0]
 8001dee:	e7d5      	b.n	8001d9c <HAL_RTC_Init+0x34>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8001df0:	6823      	ldr	r3, [r4, #0]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001df2:	6960      	ldr	r0, [r4, #20]
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8001df4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001df6:	f022 0203 	bic.w	r2, r2, #3
 8001dfa:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001dfc:	69e2      	ldr	r2, [r4, #28]
 8001dfe:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001e00:	4302      	orrs	r2, r0
 8001e02:	430a      	orrs	r2, r1
 8001e04:	64da      	str	r2, [r3, #76]	; 0x4c
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e06:	22ff      	movs	r2, #255	; 0xff
 8001e08:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_READY;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  return status;
 8001e10:	e7ca      	b.n	8001da8 <HAL_RTC_Init+0x40>

08001e12 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8001e12:	b538      	push	{r3, r4, r5, lr}
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8001e14:	4604      	mov	r4, r0
 8001e16:	2800      	cmp	r0, #0
 8001e18:	d05b      	beq.n	8001ed2 <HAL_SMBUS_Init+0xc0>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 8001e1a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001e1c:	b91b      	cbnz	r3, 8001e26 <HAL_SMBUS_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 8001e1e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 8001e22:	f000 fa5f 	bl	80022e4 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8001e26:	2302      	movs	r3, #2
 8001e28:	64a3      	str	r3, [r4, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 8001e2a:	6823      	ldr	r3, [r4, #0]
 8001e2c:	6921      	ldr	r1, [r4, #16]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	f022 0201 	bic.w	r2, r2, #1
 8001e34:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 8001e36:	6862      	ldr	r2, [r4, #4]
 8001e38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e3c:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 8001e3e:	695a      	ldr	r2, [r3, #20]
 8001e40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e44:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 8001e46:	695a      	ldr	r2, [r3, #20]
 8001e48:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001e4c:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 8001e4e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001e50:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e58:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 8001e5a:	68e2      	ldr	r2, [r4, #12]
 8001e5c:	2a00      	cmp	r2, #0
 8001e5e:	d032      	beq.n	8001ec6 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 8001e60:	2901      	cmp	r1, #1
 8001e62:	d12d      	bne.n	8001ec0 <HAL_SMBUS_Init+0xae>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 8001e64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e68:	609a      	str	r2, [r3, #8]
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e6a:	685a      	ldr	r2, [r3, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | (hsmbus->Init.OwnAddress2Masks << 8U));
 8001e6c:	69a1      	ldr	r1, [r4, #24]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | hsmbus->Init.AnalogFilter);
 8001e6e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001e70:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e72:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001e76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e7a:	605a      	str	r2, [r3, #4]
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | (hsmbus->Init.OwnAddress2Masks << 8U));
 8001e7c:	6962      	ldr	r2, [r4, #20]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	69e1      	ldr	r1, [r4, #28]
 8001e82:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e86:	60da      	str	r2, [r3, #12]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | hsmbus->Init.AnalogFilter);
 8001e88:	6a22      	ldr	r2, [r4, #32]
 8001e8a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001e8c:	432a      	orrs	r2, r5
 8001e8e:	4302      	orrs	r2, r0
 8001e90:	68a5      	ldr	r5, [r4, #8]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	432a      	orrs	r2, r5

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE)
 8001e96:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | hsmbus->Init.AnalogFilter);
 8001e9a:	601a      	str	r2, [r3, #0]
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE)
 8001e9c:	d106      	bne.n	8001eac <HAL_SMBUS_Init+0x9a>
      && ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 8001e9e:	f431 1200 	bics.w	r2, r1, #2097152	; 0x200000
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 8001ea2:	bf02      	ittt	eq
 8001ea4:	681a      	ldreq	r2, [r3, #0]
 8001ea6:	f442 3280 	orreq.w	r2, r2, #65536	; 0x10000
 8001eaa:	601a      	streq	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8001eb4:	2000      	movs	r0, #0
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8001eb6:	2301      	movs	r3, #1
  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8001eb8:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8001eba:	6423      	str	r3, [r4, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 8001ebc:	64a3      	str	r3, [r4, #72]	; 0x48

  return HAL_OK;
 8001ebe:	bd38      	pop	{r3, r4, r5, pc}
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 8001ec0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ec4:	609a      	str	r2, [r3, #8]
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 8001ec6:	2902      	cmp	r1, #2
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 8001ec8:	bf04      	itt	eq
 8001eca:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8001ece:	605a      	streq	r2, [r3, #4]
 8001ed0:	e7cb      	b.n	8001e6a <HAL_SMBUS_Init+0x58>
    return HAL_ERROR;
 8001ed2:	2001      	movs	r0, #1
}
 8001ed4:	bd38      	pop	{r3, r4, r5, pc}
	...

08001ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ed8:	b530      	push	{r4, r5, lr}
 8001eda:	b0bf      	sub	sp, #252	; 0xfc
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001edc:	2244      	movs	r2, #68	; 0x44
 8001ede:	2100      	movs	r1, #0
 8001ee0:	a806      	add	r0, sp, #24
 8001ee2:	f000 fad7 	bl	8002494 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ee6:	2214      	movs	r2, #20
 8001ee8:	2100      	movs	r1, #0
 8001eea:	a801      	add	r0, sp, #4
 8001eec:	f000 fad2 	bl	8002494 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ef0:	229c      	movs	r2, #156	; 0x9c
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	a817      	add	r0, sp, #92	; 0x5c
 8001ef6:	f000 facd 	bl	8002494 <memset>

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001efa:	2000      	movs	r0, #0
 8001efc:	f7fe ff46 	bl	8000d8c <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001f00:	230b      	movs	r3, #11
 8001f02:	9306      	str	r3, [sp, #24]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f08:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f0e:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f10:	2340      	movs	r3, #64	; 0x40
 8001f12:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001f14:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f16:	2402      	movs	r4, #2
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001f18:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 2;
  RCC_OscInitStruct.PLL.PLLN = 30;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f1a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLN = 30;
 8001f1c:	231e      	movs	r3, #30
 8001f1e:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f20:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f22:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001f24:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f26:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001f28:	9415      	str	r4, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001f2a:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f2c:	f7ff f822 	bl	8000f74 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f30:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f32:	2500      	movs	r5, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f34:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f36:	2105      	movs	r1, #5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f38:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f3a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f3c:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f3e:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f40:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f42:	9505      	str	r5, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f44:	f7ff fa68 	bl	8001418 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_I2C1
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <SystemClock_Config+0xa0>)
 8001f4a:	9317      	str	r3, [sp, #92]	; 0x5c
                              |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_DSI
                              |RCC_PERIPHCLK_LTDC;
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
  PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_DSIPHY;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001f4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f50:	933d      	str	r3, [sp, #244]	; 0xf4
  PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLLSAI2_DIV2;
  PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_HSI;
  PeriphClkInit.PLLSAI2.PLLSAI2M = 2;
  PeriphClkInit.PLLSAI2.PLLSAI2N = 8;
 8001f52:	2308      	movs	r3, #8
 8001f54:	9321      	str	r3, [sp, #132]	; 0x84
  PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV2;
  PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_LTDCCLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f56:	a817      	add	r0, sp, #92	; 0x5c
  PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_LTDCCLK;
 8001f58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f5c:	952c      	str	r5, [sp, #176]	; 0xb0
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001f5e:	952e      	str	r5, [sp, #184]	; 0xb8
  PeriphClkInit.DsiClockSelection = RCC_DSICLKSOURCE_DSIPHY;
 8001f60:	953b      	str	r5, [sp, #236]	; 0xec
  PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLLSAI2_DIV2;
 8001f62:	953a      	str	r5, [sp, #232]	; 0xe8
  PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_HSI;
 8001f64:	941f      	str	r4, [sp, #124]	; 0x7c
  PeriphClkInit.PLLSAI2.PLLSAI2M = 2;
 8001f66:	9420      	str	r4, [sp, #128]	; 0x80
  PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV2;
 8001f68:	9422      	str	r4, [sp, #136]	; 0x88
  PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 8001f6a:	9424      	str	r4, [sp, #144]	; 0x90
  PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 8001f6c:	9423      	str	r4, [sp, #140]	; 0x8c
  PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_LTDCCLK;
 8001f6e:	9325      	str	r3, [sp, #148]	; 0x94
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f70:	f7ff fc64 	bl	800183c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001f74:	b03f      	add	sp, #252	; 0xfc
 8001f76:	bd30      	pop	{r4, r5, pc}
 8001f78:	00c20140 	.word	0x00c20140

08001f7c <main>:
{
 8001f7c:	b580      	push	{r7, lr}
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f7e:	4c9c      	ldr	r4, [pc, #624]	; (80021f0 <main+0x274>)
  hsmbus3.Init.Timing = 0x307075B1;
 8001f80:	f8df 8298 	ldr.w	r8, [pc, #664]	; 800221c <main+0x2a0>
  hltdc.Instance = LTDC;
 8001f84:	4d9b      	ldr	r5, [pc, #620]	; (80021f4 <main+0x278>)
{
 8001f86:	b0b0      	sub	sp, #192	; 0xc0
  HAL_Init();
 8001f88:	f7fe f950 	bl	800022c <HAL_Init>
  SystemClock_Config();
 8001f8c:	f7ff ffa4 	bl	8001ed8 <SystemClock_Config>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f90:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001f92:	f043 0302 	orr.w	r3, r3, #2
 8001f96:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001f98:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	9301      	str	r3, [sp, #4]
 8001fa0:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fa2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fa8:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001faa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb0:	9302      	str	r3, [sp, #8]
 8001fb2:	9b02      	ldr	r3, [sp, #8]
  HAL_PWREx_EnableVddIO2();
 8001fb4:	f7fe ff44 	bl	8000e40 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fb8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  hsmbus3.Instance = I2C3;
 8001fba:	488f      	ldr	r0, [pc, #572]	; (80021f8 <main+0x27c>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fc0:	64e3      	str	r3, [r4, #76]	; 0x4c
 8001fc2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc8:	9303      	str	r3, [sp, #12]
 8001fca:	9b03      	ldr	r3, [sp, #12]
  hsmbus3.Init.Timing = 0x307075B1;
 8001fcc:	4b8b      	ldr	r3, [pc, #556]	; (80021fc <main+0x280>)
  hsmbus3.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8001fce:	2400      	movs	r4, #0
  hsmbus3.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8001fd0:	2601      	movs	r6, #1
  hsmbus3.Init.Timing = 0x307075B1;
 8001fd2:	e880 0108 	stmia.w	r0, {r3, r8}
  hsmbus3.Init.OwnAddress1 = 2;
 8001fd6:	f04f 0902 	mov.w	r9, #2
  hsmbus3.Init.SMBusTimeout = 0x000085B8;
 8001fda:	f248 53b8 	movw	r3, #34232	; 0x85b8
 8001fde:	6303      	str	r3, [r0, #48]	; 0x30
  hsmbus3.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8001fe0:	6084      	str	r4, [r0, #8]
  hsmbus3.Init.OwnAddress1 = 2;
 8001fe2:	f8c0 900c 	str.w	r9, [r0, #12]
  hsmbus3.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8001fe6:	6106      	str	r6, [r0, #16]
  hsmbus3.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8001fe8:	6144      	str	r4, [r0, #20]
  hsmbus3.Init.OwnAddress2 = 0;
 8001fea:	6184      	str	r4, [r0, #24]
  hsmbus3.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8001fec:	61c4      	str	r4, [r0, #28]
  hsmbus3.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8001fee:	6204      	str	r4, [r0, #32]
  hsmbus3.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8001ff0:	6244      	str	r4, [r0, #36]	; 0x24
  hsmbus3.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8001ff2:	6284      	str	r4, [r0, #40]	; 0x28
  hsmbus3.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8001ff4:	62c4      	str	r4, [r0, #44]	; 0x2c
  if (HAL_SMBUS_Init(&hsmbus3) != HAL_OK)
 8001ff6:	f7ff ff0c 	bl	8001e12 <HAL_SMBUS_Init>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001ffa:	2234      	movs	r2, #52	; 0x34
 8001ffc:	4621      	mov	r1, r4
 8001ffe:	a816      	add	r0, sp, #88	; 0x58
 8002000:	f000 fa48 	bl	8002494 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8002004:	2234      	movs	r2, #52	; 0x34
 8002006:	4621      	mov	r1, r4
 8002008:	a823      	add	r0, sp, #140	; 0x8c
 800200a:	f000 fa43 	bl	8002494 <memset>
  hltdc.Instance = LTDC;
 800200e:	4b7c      	ldr	r3, [pc, #496]	; (8002200 <main+0x284>)
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002010:	60ac      	str	r4, [r5, #8]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002012:	e885 0018 	stmia.w	r5, {r3, r4}
  hltdc.Init.HorizontalSync = 7;
 8002016:	2307      	movs	r3, #7
 8002018:	616b      	str	r3, [r5, #20]
  hltdc.Init.VerticalSync = 3;
 800201a:	2303      	movs	r3, #3
 800201c:	61ab      	str	r3, [r5, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800201e:	230e      	movs	r3, #14
 8002020:	61eb      	str	r3, [r5, #28]
  hltdc.Init.AccumulatedActiveW = 404;
 8002022:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8002026:	626b      	str	r3, [r5, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 395;
 8002028:	f240 138b 	movw	r3, #395	; 0x18b
 800202c:	62ab      	str	r3, [r5, #40]	; 0x28
  hltdc.Init.TotalWidth = 410;
 800202e:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8002032:	62eb      	str	r3, [r5, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 397;
 8002034:	f240 138d 	movw	r3, #397	; 0x18d
  hltdc.Init.AccumulatedVBP = 5;
 8002038:	2705      	movs	r7, #5
  hltdc.Init.TotalHeigh = 397;
 800203a:	632b      	str	r3, [r5, #48]	; 0x30
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800203c:	4628      	mov	r0, r5
  hltdc.Init.Backcolor.Blue = 128;
 800203e:	2380      	movs	r3, #128	; 0x80
 8002040:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 128;
 8002044:	f885 3035 	strb.w	r3, [r5, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 128;
 8002048:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800204c:	f44f 6a80 	mov.w	sl, #1024	; 0x400
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002050:	60ec      	str	r4, [r5, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002052:	612c      	str	r4, [r5, #16]
  hltdc.Init.AccumulatedVBP = 5;
 8002054:	622f      	str	r7, [r5, #32]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002056:	f7fe fdf1 	bl	8000c3c <HAL_LTDC_Init>
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800205a:	4622      	mov	r2, r4
 800205c:	a916      	add	r1, sp, #88	; 0x58
 800205e:	4628      	mov	r0, r5
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002060:	f8cd a074 	str.w	sl, [sp, #116]	; 0x74
  pLayerCfg.WindowX0 = 0;
 8002064:	9416      	str	r4, [sp, #88]	; 0x58
  pLayerCfg.WindowX1 = 0;
 8002066:	9417      	str	r4, [sp, #92]	; 0x5c
  pLayerCfg.WindowY0 = 0;
 8002068:	9418      	str	r4, [sp, #96]	; 0x60
  pLayerCfg.WindowY1 = 0;
 800206a:	9419      	str	r4, [sp, #100]	; 0x64
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800206c:	941a      	str	r4, [sp, #104]	; 0x68
  pLayerCfg.Alpha = 0;
 800206e:	941b      	str	r4, [sp, #108]	; 0x6c
  pLayerCfg.Alpha0 = 0;
 8002070:	941c      	str	r4, [sp, #112]	; 0x70
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002072:	971e      	str	r7, [sp, #120]	; 0x78
  pLayerCfg.FBStartAdress = 0;
 8002074:	941f      	str	r4, [sp, #124]	; 0x7c
  pLayerCfg.ImageWidth = 0;
 8002076:	9420      	str	r4, [sp, #128]	; 0x80
  pLayerCfg.ImageHeight = 0;
 8002078:	9421      	str	r4, [sp, #132]	; 0x84
  pLayerCfg.Backcolor.Blue = 0;
 800207a:	f88d 4088 	strb.w	r4, [sp, #136]	; 0x88
  pLayerCfg.Backcolor.Green = 0;
 800207e:	f88d 4089 	strb.w	r4, [sp, #137]	; 0x89
  pLayerCfg.Backcolor.Red = 0;
 8002082:	f88d 408a 	strb.w	r4, [sp, #138]	; 0x8a
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002086:	f7fe fe45 	bl	8000d14 <HAL_LTDC_ConfigLayer>
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800208a:	4632      	mov	r2, r6
 800208c:	a923      	add	r1, sp, #140	; 0x8c
 800208e:	4628      	mov	r0, r5
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002090:	f8cd a0a8 	str.w	sl, [sp, #168]	; 0xa8
  pLayerCfg1.WindowX0 = 0;
 8002094:	9423      	str	r4, [sp, #140]	; 0x8c
  pLayerCfg1.WindowX1 = 0;
 8002096:	9424      	str	r4, [sp, #144]	; 0x90
  pLayerCfg1.WindowY0 = 0;
 8002098:	9425      	str	r4, [sp, #148]	; 0x94
  pLayerCfg1.WindowY1 = 0;
 800209a:	9426      	str	r4, [sp, #152]	; 0x98
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800209c:	9427      	str	r4, [sp, #156]	; 0x9c
  pLayerCfg1.Alpha = 0;
 800209e:	9428      	str	r4, [sp, #160]	; 0xa0
  pLayerCfg1.Alpha0 = 0;
 80020a0:	9429      	str	r4, [sp, #164]	; 0xa4
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80020a2:	972b      	str	r7, [sp, #172]	; 0xac
  pLayerCfg1.FBStartAdress = 0;
 80020a4:	942c      	str	r4, [sp, #176]	; 0xb0
  pLayerCfg1.ImageWidth = 0;
 80020a6:	942d      	str	r4, [sp, #180]	; 0xb4
  pLayerCfg1.ImageHeight = 0;
 80020a8:	942e      	str	r4, [sp, #184]	; 0xb8
  pLayerCfg1.Backcolor.Blue = 0;
 80020aa:	f88d 40bc 	strb.w	r4, [sp, #188]	; 0xbc
  pLayerCfg1.Backcolor.Green = 0;
 80020ae:	f88d 40bd 	strb.w	r4, [sp, #189]	; 0xbd
  pLayerCfg1.Backcolor.Red = 0;
 80020b2:	f88d 40be 	strb.w	r4, [sp, #190]	; 0xbe
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80020b6:	f7fe fe2d 	bl	8000d14 <HAL_LTDC_ConfigLayer>
  hrtc.Instance = RTC;
 80020ba:	4852      	ldr	r0, [pc, #328]	; (8002204 <main+0x288>)
 80020bc:	4b52      	ldr	r3, [pc, #328]	; (8002208 <main+0x28c>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80020be:	6104      	str	r4, [r0, #16]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80020c0:	e880 0018 	stmia.w	r0, {r3, r4}
  hrtc.Init.AsynchPrediv = 127;
 80020c4:	237f      	movs	r3, #127	; 0x7f
 80020c6:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 80020c8:	23ff      	movs	r3, #255	; 0xff
 80020ca:	60c3      	str	r3, [r0, #12]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80020cc:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80020ce:	6184      	str	r4, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80020d0:	61c4      	str	r4, [r0, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80020d2:	f7ff fe49 	bl	8001d68 <HAL_RTC_Init>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 80020d6:	2224      	movs	r2, #36	; 0x24
 80020d8:	4621      	mov	r1, r4
 80020da:	a80d      	add	r0, sp, #52	; 0x34
 80020dc:	f000 f9da 	bl	8002494 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 80020e0:	2218      	movs	r2, #24
 80020e2:	4621      	mov	r1, r4
 80020e4:	a807      	add	r0, sp, #28
 80020e6:	f000 f9d5 	bl	8002494 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 80020ea:	2234      	movs	r2, #52	; 0x34
 80020ec:	4621      	mov	r1, r4
 80020ee:	a823      	add	r0, sp, #140	; 0x8c
 80020f0:	f000 f9d0 	bl	8002494 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80020f4:	222c      	movs	r2, #44	; 0x2c
 80020f6:	4621      	mov	r1, r4
 80020f8:	a816      	add	r0, sp, #88	; 0x58
 80020fa:	f000 f9cb 	bl	8002494 <memset>
  hdsi.Instance = DSI;
 80020fe:	4d43      	ldr	r5, [pc, #268]	; (800220c <main+0x290>)
 8002100:	4b43      	ldr	r3, [pc, #268]	; (8002210 <main+0x294>)
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8002102:	60ec      	str	r4, [r5, #12]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8002104:	e885 0018 	stmia.w	r5, {r3, r4}
  hdsi.Init.TXEscapeCkdiv = 4;
 8002108:	f04f 0a04 	mov.w	sl, #4
  PLLInit.PLLNDIV = 32;
 800210c:	2320      	movs	r3, #32
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800210e:	a904      	add	r1, sp, #16
 8002110:	4628      	mov	r0, r5
  PLLInit.PLLNDIV = 32;
 8002112:	9304      	str	r3, [sp, #16]
  hdsi.Init.TXEscapeCkdiv = 4;
 8002114:	f8c5 a008 	str.w	sl, [r5, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8002118:	9605      	str	r6, [sp, #20]
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 800211a:	9606      	str	r6, [sp, #24]
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800211c:	f7fe f966 	bl	80003ec <HAL_DSI_Init>
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8002120:	a90d      	add	r1, sp, #52	; 0x34
 8002122:	4628      	mov	r0, r5
  HostTimeouts.TimeoutCkdiv = 1;
 8002124:	960d      	str	r6, [sp, #52]	; 0x34
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8002126:	940e      	str	r4, [sp, #56]	; 0x38
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8002128:	940f      	str	r4, [sp, #60]	; 0x3c
  HostTimeouts.HighSpeedReadTimeout = 0;
 800212a:	9410      	str	r4, [sp, #64]	; 0x40
  HostTimeouts.LowPowerReadTimeout = 0;
 800212c:	9411      	str	r4, [sp, #68]	; 0x44
  HostTimeouts.HighSpeedWriteTimeout = 0;
 800212e:	9412      	str	r4, [sp, #72]	; 0x48
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8002130:	9413      	str	r4, [sp, #76]	; 0x4c
  HostTimeouts.LowPowerWriteTimeout = 0;
 8002132:	9414      	str	r4, [sp, #80]	; 0x50
  HostTimeouts.BTATimeout = 0;
 8002134:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8002136:	f7fe fb0b 	bl	8000750 <HAL_DSI_ConfigHostTimeouts>
  PhyTimings.ClockLaneHS2LPTime = 16;
 800213a:	2310      	movs	r3, #16
 800213c:	9307      	str	r3, [sp, #28]
  PhyTimings.ClockLaneLP2HSTime = 10;
 800213e:	230a      	movs	r3, #10
 8002140:	9308      	str	r3, [sp, #32]
  PhyTimings.DataLaneHS2LPTime = 8;
 8002142:	2308      	movs	r3, #8
 8002144:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8002146:	a907      	add	r1, sp, #28
  PhyTimings.DataLaneLP2HSTime = 6;
 8002148:	2306      	movs	r3, #6
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 800214a:	4628      	mov	r0, r5
  PhyTimings.DataLaneLP2HSTime = 6;
 800214c:	930a      	str	r3, [sp, #40]	; 0x28
  PhyTimings.DataLaneMaxReadTime = 0;
 800214e:	940b      	str	r4, [sp, #44]	; 0x2c
  PhyTimings.StopWaitTime = 0;
 8002150:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8002152:	f7fe fac0 	bl	80006d6 <HAL_DSI_ConfigPhyTimer>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8002156:	4651      	mov	r1, sl
 8002158:	4628      	mov	r0, r5
 800215a:	f7fe faab 	bl	80006b4 <HAL_DSI_ConfigFlowControl>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 800215e:	f242 7110 	movw	r1, #10000	; 0x2710
 8002162:	4628      	mov	r0, r5
 8002164:	f7fe fb5a 	bl	800081c <HAL_DSI_SetLowPowerRXFilter>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8002168:	4621      	mov	r1, r4
 800216a:	4628      	mov	r0, r5
 800216c:	f7fe f8d8 	bl	8000320 <HAL_DSI_ConfigErrorMonitor>
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8002170:	a923      	add	r1, sp, #140	; 0x8c
 8002172:	4628      	mov	r0, r5
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 8002174:	9423      	str	r4, [sp, #140]	; 0x8c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8002176:	9424      	str	r4, [sp, #144]	; 0x90
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 8002178:	9425      	str	r4, [sp, #148]	; 0x94
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 800217a:	9426      	str	r4, [sp, #152]	; 0x98
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 800217c:	9427      	str	r4, [sp, #156]	; 0x9c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 800217e:	9428      	str	r4, [sp, #160]	; 0xa0
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 8002180:	9429      	str	r4, [sp, #164]	; 0xa4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8002182:	942a      	str	r4, [sp, #168]	; 0xa8
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 8002184:	942b      	str	r4, [sp, #172]	; 0xac
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8002186:	942c      	str	r4, [sp, #176]	; 0xb0
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8002188:	942d      	str	r4, [sp, #180]	; 0xb4
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 800218a:	942e      	str	r4, [sp, #184]	; 0xb8
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 800218c:	942f      	str	r4, [sp, #188]	; 0xbc
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 800218e:	f7fe fa5d 	bl	800064c <HAL_DSI_ConfigCommand>
  CmdCfg.CommandSize = 390;
 8002192:	f44f 73c3 	mov.w	r3, #390	; 0x186
 8002196:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8002198:	a916      	add	r1, sp, #88	; 0x58
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 800219a:	2340      	movs	r3, #64	; 0x40
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 800219c:	4628      	mov	r0, r5
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 800219e:	931f      	str	r3, [sp, #124]	; 0x7c
  CmdCfg.VirtualChannelID = 0;
 80021a0:	9416      	str	r4, [sp, #88]	; 0x58
  CmdCfg.ColorCoding = DSI_RGB888;
 80021a2:	9717      	str	r7, [sp, #92]	; 0x5c
  CmdCfg.TearingEffectSource = DSI_TE_DSILINK;
 80021a4:	9419      	str	r4, [sp, #100]	; 0x64
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 80021a6:	941a      	str	r4, [sp, #104]	; 0x68
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 80021a8:	f8cd a06c 	str.w	sl, [sp, #108]	; 0x6c
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 80021ac:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 80021b0:	941d      	str	r4, [sp, #116]	; 0x74
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 80021b2:	941e      	str	r4, [sp, #120]	; 0x78
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 80021b4:	9420      	str	r4, [sp, #128]	; 0x80
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 80021b6:	f7fe f9d8 	bl	800056a <HAL_DSI_ConfigAdaptedCommandMode>
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 80021ba:	4621      	mov	r1, r4
 80021bc:	4628      	mov	r0, r5
  hi2c1.Instance = I2C1;
 80021be:	4d15      	ldr	r5, [pc, #84]	; (8002214 <main+0x298>)
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 80021c0:	f7fe f9c2 	bl	8000548 <HAL_DSI_SetGenericVCID>
  hi2c1.Instance = I2C1;
 80021c4:	4b14      	ldr	r3, [pc, #80]	; (8002218 <main+0x29c>)
  hi2c1.Init.OwnAddress1 = 0;
 80021c6:	60ac      	str	r4, [r5, #8]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021c8:	4628      	mov	r0, r5
  hi2c1.Init.Timing = 0x307075B1;
 80021ca:	e885 0108 	stmia.w	r5, {r3, r8}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021ce:	60ee      	str	r6, [r5, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021d0:	612c      	str	r4, [r5, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80021d2:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80021d4:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021d6:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021d8:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021da:	f7fe fc0d 	bl	80009f8 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021de:	4621      	mov	r1, r4
 80021e0:	4628      	mov	r0, r5
 80021e2:	f7fe fc5a 	bl	8000a9a <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80021e6:	4621      	mov	r1, r4
 80021e8:	4628      	mov	r0, r5
 80021ea:	f7fe fc7c 	bl	8000ae6 <HAL_I2CEx_ConfigDigitalFilter>
 80021ee:	e7fe      	b.n	80021ee <main+0x272>
 80021f0:	40021000 	.word	0x40021000
 80021f4:	2009491c 	.word	0x2009491c
 80021f8:	200949e8 	.word	0x200949e8
 80021fc:	40005c00 	.word	0x40005c00
 8002200:	40016800 	.word	0x40016800
 8002204:	200949c4 	.word	0x200949c4
 8002208:	40002800 	.word	0x40002800
 800220c:	20094900 	.word	0x20094900
 8002210:	40016c00 	.word	0x40016c00
 8002214:	20000024 	.word	0x20000024
 8002218:	40005400 	.word	0x40005400
 800221c:	307075b1 	.word	0x307075b1

08002220 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002220:	4b0a      	ldr	r3, [pc, #40]	; (800224c <HAL_MspInit+0x2c>)
 8002222:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002224:	f042 0201 	orr.w	r2, r2, #1
 8002228:	661a      	str	r2, [r3, #96]	; 0x60
 800222a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 800222c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800222e:	f002 0201 	and.w	r2, r2, #1
 8002232:	9200      	str	r2, [sp, #0]
 8002234:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002236:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002238:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800223c:	659a      	str	r2, [r3, #88]	; 0x58
 800223e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002244:	9301      	str	r3, [sp, #4]
 8002246:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002248:	b002      	add	sp, #8
 800224a:	4770      	bx	lr
 800224c:	40021000 	.word	0x40021000

08002250 <HAL_DSI_MspInit>:
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
  if(hdsi->Instance==DSI)
 8002250:	6802      	ldr	r2, [r0, #0]
 8002252:	4b08      	ldr	r3, [pc, #32]	; (8002274 <HAL_DSI_MspInit+0x24>)
 8002254:	429a      	cmp	r2, r3
{
 8002256:	b082      	sub	sp, #8
  if(hdsi->Instance==DSI)
 8002258:	d10a      	bne.n	8002270 <HAL_DSI_MspInit+0x20>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 800225a:	f503 4324 	add.w	r3, r3, #41984	; 0xa400
 800225e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002260:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002264:	661a      	str	r2, [r3, #96]	; 0x60
 8002266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002268:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800226c:	9301      	str	r3, [sp, #4]
 800226e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8002270:	b002      	add	sp, #8
 8002272:	4770      	bx	lr
 8002274:	40016c00 	.word	0x40016c00

08002278 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002278:	b510      	push	{r4, lr}
 800227a:	4604      	mov	r4, r0
 800227c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227e:	2214      	movs	r2, #20
 8002280:	2100      	movs	r1, #0
 8002282:	a803      	add	r0, sp, #12
 8002284:	f000 f906 	bl	8002494 <memset>
  if(hi2c->Instance==I2C1)
 8002288:	6822      	ldr	r2, [r4, #0]
 800228a:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <HAL_I2C_MspInit+0x60>)
 800228c:	429a      	cmp	r2, r3
 800228e:	d121      	bne.n	80022d4 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002290:	4c12      	ldr	r4, [pc, #72]	; (80022dc <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002292:	4813      	ldr	r0, [pc, #76]	; (80022e0 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002294:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002296:	f043 0302 	orr.w	r3, r3, #2
 800229a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800229c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	9301      	str	r3, [sp, #4]
 80022a4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022aa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022ac:	2312      	movs	r3, #18
 80022ae:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022b0:	2301      	movs	r3, #1
 80022b2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b4:	2303      	movs	r3, #3
 80022b6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022ba:	2304      	movs	r3, #4
 80022bc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022be:	f7fe fac3 	bl	8000848 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80022c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022c8:	65a3      	str	r3, [r4, #88]	; 0x58
 80022ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80022cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d0:	9302      	str	r3, [sp, #8]
 80022d2:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80022d4:	b008      	add	sp, #32
 80022d6:	bd10      	pop	{r4, pc}
 80022d8:	40005400 	.word	0x40005400
 80022dc:	40021000 	.word	0x40021000
 80022e0:	48000400 	.word	0x48000400

080022e4 <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 80022e4:	b510      	push	{r4, lr}
 80022e6:	4604      	mov	r4, r0
 80022e8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ea:	2214      	movs	r2, #20
 80022ec:	2100      	movs	r1, #0
 80022ee:	a803      	add	r0, sp, #12
 80022f0:	f000 f8d0 	bl	8002494 <memset>
  if(hsmbus->Instance==I2C3)
 80022f4:	6822      	ldr	r2, [r4, #0]
 80022f6:	4b14      	ldr	r3, [pc, #80]	; (8002348 <HAL_SMBUS_MspInit+0x64>)
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d123      	bne.n	8002344 <HAL_SMBUS_MspInit+0x60>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80022fc:	4c13      	ldr	r4, [pc, #76]	; (800234c <HAL_SMBUS_MspInit+0x68>)
 80022fe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002304:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002306:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230c:	9301      	str	r3, [sp, #4]
 800230e:	9b01      	ldr	r3, [sp, #4]
    HAL_PWREx_EnableVddIO2();
 8002310:	f7fe fd96 	bl	8000e40 <HAL_PWREx_EnableVddIO2>
    /**I2C3 GPIO Configuration    
    PG8     ------> I2C3_SDA
    PG7     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 8002314:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002318:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800231a:	2312      	movs	r3, #18
 800231c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800231e:	2301      	movs	r3, #1
 8002320:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002322:	2303      	movs	r3, #3
 8002324:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002326:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002328:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800232a:	4809      	ldr	r0, [pc, #36]	; (8002350 <HAL_SMBUS_MspInit+0x6c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800232c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800232e:	f7fe fa8b 	bl	8000848 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002332:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002334:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002338:	65a3      	str	r3, [r4, #88]	; 0x58
 800233a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800233c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002340:	9302      	str	r3, [sp, #8]
 8002342:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002344:	b008      	add	sp, #32
 8002346:	bd10      	pop	{r4, pc}
 8002348:	40005c00 	.word	0x40005c00
 800234c:	40021000 	.word	0x40021000
 8002350:	48001800 	.word	0x48001800

08002354 <HAL_LTDC_MspInit>:
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
  if(hltdc->Instance==LTDC)
 8002354:	6802      	ldr	r2, [r0, #0]
 8002356:	4b08      	ldr	r3, [pc, #32]	; (8002378 <HAL_LTDC_MspInit+0x24>)
 8002358:	429a      	cmp	r2, r3
{
 800235a:	b082      	sub	sp, #8
  if(hltdc->Instance==LTDC)
 800235c:	d10a      	bne.n	8002374 <HAL_LTDC_MspInit+0x20>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800235e:	f503 4328 	add.w	r3, r3, #43008	; 0xa800
 8002362:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002364:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002368:	661a      	str	r2, [r3, #96]	; 0x60
 800236a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800236c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002370:	9301      	str	r3, [sp, #4]
 8002372:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002374:	b002      	add	sp, #8
 8002376:	4770      	bx	lr
 8002378:	40016800 	.word	0x40016800

0800237c <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 800237c:	6802      	ldr	r2, [r0, #0]
 800237e:	4b05      	ldr	r3, [pc, #20]	; (8002394 <HAL_RTC_MspInit+0x18>)
 8002380:	429a      	cmp	r2, r3
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002382:	bf01      	itttt	eq
 8002384:	4a04      	ldreq	r2, [pc, #16]	; (8002398 <HAL_RTC_MspInit+0x1c>)
 8002386:	f8d2 3090 	ldreq.w	r3, [r2, #144]	; 0x90
 800238a:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
 800238e:	f8c2 3090 	streq.w	r3, [r2, #144]	; 0x90
 8002392:	4770      	bx	lr
 8002394:	40002800 	.word	0x40002800
 8002398:	40021000 	.word	0x40021000

0800239c <NMI_Handler>:
 800239c:	4770      	bx	lr

0800239e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800239e:	e7fe      	b.n	800239e <HardFault_Handler>

080023a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023a0:	e7fe      	b.n	80023a0 <MemManage_Handler>

080023a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023a2:	e7fe      	b.n	80023a2 <BusFault_Handler>

080023a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023a4:	e7fe      	b.n	80023a4 <UsageFault_Handler>

080023a6 <SVC_Handler>:
 80023a6:	4770      	bx	lr

080023a8 <DebugMon_Handler>:
 80023a8:	4770      	bx	lr

080023aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023aa:	4770      	bx	lr

080023ac <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023ac:	f7fd bf4e 	b.w	800024c <HAL_IncTick>

080023b0 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023b0:	490f      	ldr	r1, [pc, #60]	; (80023f0 <SystemInit+0x40>)
 80023b2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80023b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80023be:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <SystemInit+0x44>)
 80023c0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80023c2:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80023c4:	f042 0201 	orr.w	r2, r2, #1
 80023c8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80023ca:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80023d2:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80023d6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80023d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023dc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023e4:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80023e6:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80023ec:	608b      	str	r3, [r1, #8]
 80023ee:	4770      	bx	lr
 80023f0:	e000ed00 	.word	0xe000ed00
 80023f4:	40021000 	.word	0x40021000

080023f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002430 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80023fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80023fe:	e003      	b.n	8002408 <LoopCopyDataInit>

08002400 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002400:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002402:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002404:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002406:	3104      	adds	r1, #4

08002408 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002408:	480b      	ldr	r0, [pc, #44]	; (8002438 <LoopForever+0xa>)
	ldr	r3, =_edata
 800240a:	4b0c      	ldr	r3, [pc, #48]	; (800243c <LoopForever+0xe>)
	adds	r2, r0, r1
 800240c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800240e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002410:	d3f6      	bcc.n	8002400 <CopyDataInit>
	ldr	r2, =_sbss
 8002412:	4a0b      	ldr	r2, [pc, #44]	; (8002440 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002414:	e002      	b.n	800241c <LoopFillZerobss>

08002416 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002416:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002418:	f842 3b04 	str.w	r3, [r2], #4

0800241c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800241c:	4b09      	ldr	r3, [pc, #36]	; (8002444 <LoopForever+0x16>)
	cmp	r2, r3
 800241e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002420:	d3f9      	bcc.n	8002416 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002422:	f7ff ffc5 	bl	80023b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002426:	f000 f811 	bl	800244c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800242a:	f7ff fda7 	bl	8001f7c <main>

0800242e <LoopForever>:

LoopForever:
    b LoopForever
 800242e:	e7fe      	b.n	800242e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002430:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8002434:	08002504 	.word	0x08002504
	ldr	r0, =_sdata
 8002438:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800243c:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8002440:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8002444:	20094a38 	.word	0x20094a38

08002448 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002448:	e7fe      	b.n	8002448 <ADC1_IRQHandler>
	...

0800244c <__libc_init_array>:
 800244c:	b570      	push	{r4, r5, r6, lr}
 800244e:	4e0d      	ldr	r6, [pc, #52]	; (8002484 <__libc_init_array+0x38>)
 8002450:	4c0d      	ldr	r4, [pc, #52]	; (8002488 <__libc_init_array+0x3c>)
 8002452:	1ba4      	subs	r4, r4, r6
 8002454:	10a4      	asrs	r4, r4, #2
 8002456:	2500      	movs	r5, #0
 8002458:	42a5      	cmp	r5, r4
 800245a:	d109      	bne.n	8002470 <__libc_init_array+0x24>
 800245c:	4e0b      	ldr	r6, [pc, #44]	; (800248c <__libc_init_array+0x40>)
 800245e:	4c0c      	ldr	r4, [pc, #48]	; (8002490 <__libc_init_array+0x44>)
 8002460:	f000 f820 	bl	80024a4 <_init>
 8002464:	1ba4      	subs	r4, r4, r6
 8002466:	10a4      	asrs	r4, r4, #2
 8002468:	2500      	movs	r5, #0
 800246a:	42a5      	cmp	r5, r4
 800246c:	d105      	bne.n	800247a <__libc_init_array+0x2e>
 800246e:	bd70      	pop	{r4, r5, r6, pc}
 8002470:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002474:	4798      	blx	r3
 8002476:	3501      	adds	r5, #1
 8002478:	e7ee      	b.n	8002458 <__libc_init_array+0xc>
 800247a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800247e:	4798      	blx	r3
 8002480:	3501      	adds	r5, #1
 8002482:	e7f2      	b.n	800246a <__libc_init_array+0x1e>
 8002484:	080024fc 	.word	0x080024fc
 8002488:	080024fc 	.word	0x080024fc
 800248c:	080024fc 	.word	0x080024fc
 8002490:	08002500 	.word	0x08002500

08002494 <memset>:
 8002494:	4402      	add	r2, r0
 8002496:	4603      	mov	r3, r0
 8002498:	4293      	cmp	r3, r2
 800249a:	d100      	bne.n	800249e <memset+0xa>
 800249c:	4770      	bx	lr
 800249e:	f803 1b01 	strb.w	r1, [r3], #1
 80024a2:	e7f9      	b.n	8002498 <memset+0x4>

080024a4 <_init>:
 80024a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024a6:	bf00      	nop
 80024a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024aa:	bc08      	pop	{r3}
 80024ac:	469e      	mov	lr, r3
 80024ae:	4770      	bx	lr

080024b0 <_fini>:
 80024b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024b2:	bf00      	nop
 80024b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024b6:	bc08      	pop	{r3}
 80024b8:	469e      	mov	lr, r3
 80024ba:	4770      	bx	lr
